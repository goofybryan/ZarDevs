<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZarDevs.DependencyInjection.Extensions</name>
    </assembly>
    <members>
        <member name="T:ZarDevs.DependencyInjection.ConfigureIoc">
            <summary>
            Configure the extentions bindings.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.ConfigureIoc.ConfigureExtentions(ZarDevs.DependencyInjection.IDependencyBuilder)">
            <summary>
            Configure the extentions required by the IOC.
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencyContainer">
            <summary>
            Dependency container that is used to build bindings and apply them to the configuration.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyContainer.#ctor(ZarDevs.DependencyInjection.IDependencyResolutionConfiguration,ZarDevs.DependencyInjection.IDependencyScopeCompiler{ZarDevs.DependencyInjection.IDependencyResolutionConfiguration})">
            <summary>
            Create a new instance of the dependency container.
            </summary>
            <param name="configuration">
            The instance configuration that will contain the binding configuration.
            </param>
            <param name="scopeCompiler">Scope compiler</param>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencyFactoryResolution">
            <summary>
            Dependency type resolution that will resolve the <see cref="P:ZarDevs.DependencyInjection.IDependencyInfo.ResolvedTypes"/>
            and will call the <see cref="P:ZarDevs.DependencyInjection.IDependencyFactoryInfo.FactoryType"/><see cref="P:ZarDevs.DependencyInjection.IDependencyFactoryInfo.MethodName"/>
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyFactoryResolution.#ctor(ZarDevs.DependencyInjection.IDependencyFactoryInfo,ZarDevs.DependencyInjection.IDependencyFactory)">
            <summary>
            Create a new instance of the dependency type resolution.
            </summary>
            <param name="info">The type information describing this resolution.</param>
            <param name="factory">The dependency factory</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyFactoryResolution.Resolve">
            <summary>
            Resolve and return the instance
            </summary>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyFactoryResolution.Resolve(System.Object[])">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="args">A list of ordered constructor arguments.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyFactoryResolution.Resolve(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="args">A list of named constructor arguments.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyFactoryResolution.Resolve(ZarDevs.DependencyInjection.IDependencyContext)">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="context">The dependency context.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyFactoryResolution.OnMakeConcrete(System.Type[])">
            <summary>
            Override to make a resolution, otherwise a <see cref="T:System.NotSupportedException"/> will be thrown.
            </summary>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns></returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyInstanceResolution">
            <summary>
            Dependency instance resolution
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyInstanceResolution.GetAllResolutions(System.Type)">
            <summary>
            Get all the resolution for the request type.
            </summary>
            <param name="requestType">The request type that will need to be resolved.</param>
            <returns>
            The resolved instance, if not found an empty <see
            cref="M:System.Linq.Enumerable.Empty``1"/> will be returned.
            </returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyInstanceResolution.GetAllResolutions(System.Type,System.Object)">
            <summary>
            Get all the resolution for the request type.
            </summary>
            <param name="requestType">The request type that will need to be resolved.</param>
            <param name="key">The key for this resolution. A null value is also considered a key.</param>
            <returns>
            The resolved instance, if not found an empty <see
            cref="M:System.Linq.Enumerable.Empty``1"/> will be returned.
            </returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyInstanceResolution.GetResolution(System.Type)">
            <summary>
            Get the resolution for the request type.
            </summary>
            <param name="requestType">The request type that will need to be resolved.</param>
            <returns>
            The resolved instance, if not found a <see cref="T:ZarDevs.DependencyInjection.NotFoundDependencyResolution"/> that
            will throw an <see cref="T:ZarDevs.DependencyInjection.DependencyResolutionNotConfiguredException"/>.
            </returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyInstanceResolution.GetResolution(System.Object,System.Type)">
            <summary>
            Get the resolution for the request type.
            </summary>
            <param name="requestType">The request type that will need to be resolved.</param>
            <param name="key">The key for this resolution.</param>
            <returns>
            The resolved instance, if not found a <see cref="T:ZarDevs.DependencyInjection.NotFoundDependencyResolution"/> that
            will throw an <see cref="T:ZarDevs.DependencyInjection.DependencyResolutionNotConfiguredException"/>.
            </returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyInstanceResolution.TryGetResolution(System.Type)">
            <summary>
            Try and get the resolution for the request type.
            </summary>
            <param name="requestType">The request type that will need to be resolved.</param>
            <returns>
            The resolved instance, if not found a <see cref="T:ZarDevs.DependencyInjection.NotFoundDependencyResolution"/> that
            will return null when resolved.
            </returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyInstanceResolution.TryGetResolution(System.Object,System.Type)">
            <summary>
            Get the resolution for the request type.
            </summary>
            <param name="requestType">The request type that will need to be resolved.</param>
            <param name="key">The key for this resolution.</param>
            <returns>
            The resolved instance, if not found a <see cref="T:ZarDevs.DependencyInjection.NotFoundDependencyResolution"/> that
            will return null when resolved.
            </returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyInstanceResolution.TryGetResolution(ZarDevs.DependencyInjection.IDependencyInfo)">
            <summary>
            Try and get the resolution for the request info.
            </summary>
            <param name="info">The request info that will need to be resolved.</param>
            <returns>
            The resolved instance, if not found a <see cref="T:ZarDevs.DependencyInjection.NotFoundDependencyResolution"/> that
            will return null when resolved.
            </returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyInstanceResolution.TryGetResolution(System.Object,ZarDevs.DependencyInjection.IDependencyInfo)">
            <summary>
            Get the resolution for the request info.
            </summary>
            <param name="info">The request info that will need to be resolved.</param>
            <param name="key">The key for this resolution.</param>
            <returns>
            The resolved instance, if not found a <see cref="T:ZarDevs.DependencyInjection.NotFoundDependencyResolution"/> that
            will return null when resolved.
            </returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencyInstanceResolution">
            <summary>
            Dependency resolution configuration is used to configure any dependency resolutions and get
            them them at runtime.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInstanceResolution.#ctor(ZarDevs.DependencyInjection.IDependencyResolutionConfiguration)">
            <summary>
            Create a new instance of the Dependency resolution configuration.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInstanceResolution.Dispose">
            <summary>
            Dispose of the underlying resources. If any <see cref="T:ZarDevs.DependencyInjection.IDependencyResolution"/>
            implements <see cref="T:System.IDisposable"/> that will be called.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInstanceResolution.GetAllResolutions(System.Type)">
            <summary>
            Get all the resolution for the request type.
            </summary>
            <param name="requestType">The request type that will need to be resolved.</param>
            <returns>
            The resolved instance, if not found an empty <see
            cref="M:System.Linq.Enumerable.Empty``1"/> will be returned.
            </returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInstanceResolution.GetAllResolutions(System.Type,System.Object)">
            <summary>
            Get all the resolution for the request type.
            </summary>
            <param name="requestType">The request type that will need to be resolved.</param>
            <param name="key">
            The key for this resolution. A null value is also considered a key and will return only
            resolutions that have no key configured.
            </param>
            <returns>
            The resolved instance, if not found an empty <see
            cref="M:System.Linq.Enumerable.Empty``1"/> will be returned.
            </returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInstanceResolution.GetResolution(System.Object,System.Type)">
            <summary>
            Get the resolution for the request type.
            </summary>
            <param name="requestType">The request type that will need to be resolved.</param>
            <param name="key">The key for this resolution.</param>
            <returns>
            The resolved instance, if not found a <see cref="T:ZarDevs.DependencyInjection.NotFoundDependencyResolution"/> that
            will throw an <see cref="T:ZarDevs.DependencyInjection.DependencyResolutionNotConfiguredException"/>.
            </returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInstanceResolution.GetResolution(System.Type)">
            <summary>
            Get the resolution for the request type.
            </summary>
            <param name="requestType">The request type that will need to be resolved.</param>
            <returns>
            The resolved instance, if not found a <see cref="T:ZarDevs.DependencyInjection.NotFoundDependencyResolution"/> that
            will throw an <see cref="T:ZarDevs.DependencyInjection.DependencyResolutionNotConfiguredException"/>.
            </returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInstanceResolution.TryGetResolution(System.Object,System.Type)">
            <summary>
            Get the resolution for the request type.
            </summary>
            <param name="requestType">The request type that will need to be resolved.</param>
            <param name="key">The key for this resolution.</param>
            <returns>The resolved instance, if not found a <see cref="T:ZarDevs.DependencyInjection.NotFoundDependencyResolution"/>.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInstanceResolution.TryGetResolution(System.Type)">
            <summary>
            Get the resolution for the request type.
            </summary>
            <param name="requestType">The request type that will need to be resolved.</param>
            <returns>The resolved instance, if not found a <see cref="T:ZarDevs.DependencyInjection.NotFoundDependencyResolution"/>.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInstanceResolution.TryGetResolution(ZarDevs.DependencyInjection.IDependencyInfo)">
            <summary>
            Get the resolution for the request info.
            </summary>
            <param name="info">The request info that will need to be resolved.</param>
            <returns>
            The resolved instance, if not found a <see cref="T:ZarDevs.DependencyInjection.NotFoundDependencyResolution"/> that
            will return null when resolved.
            </returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInstanceResolution.TryGetResolution(System.Object,ZarDevs.DependencyInjection.IDependencyInfo)">
            <summary>
            Get the resolution for the request info.
            </summary>
            <param name="info">The request info that will need to be resolved.</param>
            <param name="key">The key for this resolution.</param>
            <returns>
            The resolved instance, if not found a <see cref="T:ZarDevs.DependencyInjection.NotFoundDependencyResolution"/> that
            will return null when resolved.
            </returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInstanceResolution.Dispose(System.Boolean)">
            <summary>
            Dispose of the underlying resources. If any <see cref="T:ZarDevs.DependencyInjection.IDependencyResolution"/>
            implements <see cref="T:System.IDisposable"/> that will be called.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencyMethodResolution">
            <summary>
            Dependency method resolution that will execute the method described in the <see cref="T:ZarDevs.DependencyInjection.IDependencyMethodInfo"/>
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyMethodResolution.#ctor(ZarDevs.DependencyInjection.IDependencyMethodInfo)">
            <summary>
            Create a new instance of the dependency method resolution.
            </summary>
            <param name="info">
            The the <see cref="T:ZarDevs.DependencyInjection.IDependencyInstanceInfo"/> that describes this resolution.
            </param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyMethodResolution.Resolve(System.Object[])">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="args">A list of ordered constructor arguments.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyMethodResolution.Resolve(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="args">A list of named constructor arguments.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyMethodResolution.Resolve">
            <summary>
            Resolve and return the instance
            </summary>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyMethodResolution.Resolve(ZarDevs.DependencyInjection.IDependencyContext)">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="context">The dependency context.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencyResolution`1">
            <summary>
            Abstract resolution class that is implementing the base requirements of <see cref="T:ZarDevs.DependencyInjection.IDependencyResolution"/>
            </summary>
            <typeparam name="TInfo">The dependency info type describing the resolution</typeparam>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolution`1.#ctor(`0)">
            <summary>
            Base constructor
            </summary>
            <param name="info">The dependency info describing the resolution.</param>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencyResolution`1.Info">
            <summary>
            The <see cref="T:ZarDevs.DependencyInjection.IDependencyInfo"/> impementation describing this resolution.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencyResolution`1.Key">
            <summary>
            The key that is associated to this resolution.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencyResolution`1.ResolvedTypes">
            <summary>
            Get the type that this resolution is for.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolution`1.MakeConcrete(System.Type)">
            <summary>
            Create a concrete resolution out of a generic.
            </summary>
            <param name="concreteRequest">The concrete request type.</param>
            <exception cref="T:System.InvalidOperationException">
            Throws when the current <see cref="P:ZarDevs.DependencyInjection.IDependencyInfo.ResolvedTypes"/> is not compatible with the <paramref name="concreteRequest"/>
            </exception>
            <exception cref="T:System.NotSupportedException">
            Throws this when the resolution does not support making a
            </exception>
            <returns>A resolution</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolution`1.Resolve">
            <summary>
            Resolve and return the instance
            </summary>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolution`1.Resolve(System.Object[])">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="args">A list of named constructor arguments.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolution`1.Resolve(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="args">A list of ordered constructor arguments.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolution`1.Resolve(ZarDevs.DependencyInjection.IDependencyContext)">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="context">The dependency context.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolution`1.OnMakeConcrete(System.Type[])">
            <summary>
            Override to make a resolution, otherwise a <see cref="T:System.NotSupportedException"/> will be thrown.
            </summary>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns></returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyResolutionConfiguration">
            <summary>
            Dependency instance configuration
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IDependencyResolutionConfiguration.HasGenericFactoryTypes">
            <summary>
            Get an indicator that this configuration has generic factory types.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolutionConfiguration.Add(System.Type,ZarDevs.DependencyInjection.IDependencyResolution)">
            <summary>
            Configure the request type <paramref name="type"/> to the resolution <paramref name="resolution"/>
            </summary>
            <param name="type">The request type that will need to be resolved.</param>
            <param name="resolution">The resolution that will be implemented.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolutionConfiguration.Add(System.Collections.Generic.ICollection{System.Type},ZarDevs.DependencyInjection.IDependencyResolution)">
            <summary>
            Configure the request type <paramref name="types"/> to the resolution <paramref name="resolution"/>
            </summary>
            <param name="types">The request type that will need to be resolved.</param>
            <param name="resolution">The resolution that will be implemented.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolutionConfiguration.AddInstance``1(``0)">
            <summary>
            Add an instance to the configuration for the Type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of the instance.</typeparam>
            <param name="instance">The instance that will always be resolved.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolutionConfiguration.GetResolutionsByKey(System.Type,System.Object)">
            <summary>
            Get a list of configured resolutions by key. If any generic resolution is requested, it
            will be generated for all and then the keyed values will be returned.
            </summary>
            <param name="type">The request type that will need to be resolved.</param>
            <param name="key">The key that is requested, can be null.</param>
            <returns>A list of resolutions, if none found, will return <see cref="M:System.Linq.Enumerable.Empty``1"/></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolutionConfiguration.GetResolutionsByType(System.Type)">
            <summary>
            Get a list of configured resolutions. If any generic resolution is requested, it will be
            generated for all.
            </summary>
            <param name="type">The request type that will need to be resolved.</param>
            <returns>A list of resolutions, if none found, will return <see cref="M:System.Linq.Enumerable.Empty``1"/></returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencyResolutionConfiguration">
            <summary>
            Dependency instance configuration
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolutionConfiguration.#ctor">
            <summary>
            Create a new instance of the dependency resolution configuration.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencyResolutionConfiguration.HasGenericFactoryTypes">
            <summary>
            Get an indicator that this configuration has generic factory types.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolutionConfiguration.Add(System.Type,ZarDevs.DependencyInjection.IDependencyResolution)">
            <summary>
            Configure the request type <paramref name="type"/> to the resolution <paramref name="resolution"/>
            </summary>
            <param name="type">The request type that will need to be resolved.</param>
            <param name="resolution">The resolution that will be implemented.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolutionConfiguration.Add(System.Collections.Generic.ICollection{System.Type},ZarDevs.DependencyInjection.IDependencyResolution)">
            <summary>
            Configure the request type <paramref name="types"/> to the resolution <paramref name="resolution"/>
            </summary>
            <param name="types">The request type that will need to be resolved.</param>
            <param name="resolution">The resolution that will be implemented.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolutionConfiguration.AddInstance``1(``0)">
            <summary>
            Add an instance to the configuration for the Type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of the instance.</typeparam>
            <param name="instance">The instance that will always be resolved.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolutionConfiguration.Dispose">
            <summary>
            Dispose of the underlying resources. If any <see cref="T:ZarDevs.DependencyInjection.IDependencyResolution"/>
            implement <see cref="T:System.IDisposable"/>, they will also be called.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolutionConfiguration.GetResolutionsByKey(System.Type,System.Object)">
            <summary>
            Get a list of configured resolutions by key. If any generic resolution is requested, it
            will be generated for all and then the keyed values will be returned.
            </summary>
            <param name="type">The request type that will need to be resolved.</param>
            <param name="key">
            The key that is requested, can be null. Be warned, if the key is null, it will only
            return configured values that have a null key.
            </param>
            <returns>A list of resolutions, if none found, will return <see cref="M:System.Linq.Enumerable.Empty``1"/></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolutionConfiguration.GetResolutionsByType(System.Type)">
            <summary>
            Get a list of configured resolutions. If any generic resolution is requested, it will be
            generated for all.
            </summary>
            <param name="type">The request type that will need to be resolved.</param>
            <returns>A list of resolutions, if none found, will return <see cref="M:System.Linq.Enumerable.Empty``1"/></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolutionConfiguration.Dispose(System.Boolean)">
            <summary>
            Dispose of the underlying resources. If any <see cref="T:ZarDevs.DependencyInjection.IDependencyResolution"/>
            implement <see cref="T:System.IDisposable"/>, they will also be called.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencyResolutionFactory">
            <inheritdoc/>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolutionFactory.#ctor(ZarDevs.DependencyInjection.IDependencyTypeActivator,ZarDevs.DependencyInjection.IDependencyFactory)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.DependencyInjection.DependencyResolutionFactory"/>
            </summary>
            <param name="activator">The dependency type activator</param>
            <param name="dependencyFactory">The defpendecy factory</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolutionFactory.ResolutionFor(ZarDevs.DependencyInjection.IDependencyTypeInfo)">
            <inheritdoc/>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolutionFactory.ResolutionFor(ZarDevs.DependencyInjection.IDependencyMethodInfo)">
            <inheritdoc/>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolutionFactory.ResolutionFor(ZarDevs.DependencyInjection.IDependencyInstanceInfo)">
            <inheritdoc/>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolutionFactory.ResolutionFor(ZarDevs.DependencyInjection.IDependencyFactoryInfo)">
            <inheritdoc/>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencyResolutionNotConfiguredException">
            <summary>
            Dependency resolution configured
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolutionNotConfiguredException.#ctor(System.Type,System.Object)">
            <summary>
            </summary>
            <param name="requestType"></param>
            <param name="key"></param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolutionNotConfiguredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Insternal serialization constructor
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencyResolutionNotConfiguredException.Key">
            <summary>
            Return the key
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencyResolutionNotConfiguredException.RequestType">
            <summary>
            Return the request type.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyResolutions">
            <summary>
            Interface for resolving multiple resolutions.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IDependencyResolutions.RequestType">
            <summary>
            Get the request type that this resolution is for.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolutions.Resolve``1">
            <summary>
            Resolve and resolutions and return as <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The return type to resolve to.</typeparam>
            <returns>An IEnumerable of the resolved values cast to <typeparamref name="T"/></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolutions.Resolve">
            <summary>
            Resolve and resolutions and return
            </summary>
            <returns>An IEnumerable of the resolved values</returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyResolver">
            <summary>
            Dependency resolver used when a custom resololution is required.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolver.TryGetAllResolutions``1">
            <summary>
            Try and get all the resolutions for the type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type to resolve</typeparam>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolver.TryGetAllResolutions(System.Type)">
            <summary>
            Try and get all the resolutions for the type <paramref name="typeToResolve"/>
            </summary>
            <param name="typeToResolve">The type to resolve</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolver.TryGetResolution``1(System.Object)">
            <summary>
            Try and get the resolution for the type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type to resolve</typeparam>
            <param name="key">An optional key, to only resolve those.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolver.TryGetResolution(System.Type,System.Object)">
            <summary>
            Try and get the resolution for the type <paramref name="typeToResolve"/>
            </summary>
            <param name="typeToResolve">The type to resolve</param>
            <param name="key">An optional key, to only resolve those.</param>
            <returns></returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencyResolver">
            <summary>
            Dependency resolver used when a custom resololution is required.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.#ctor(ZarDevs.DependencyInjection.IDependencyInstanceResolution)">
            <summary>
            Create a new instance of the dependency resolution class
            </summary>
            <param name="instanceResolution">The dependecy resolution container.</param>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencyResolver.Kernel">
            <summary>
            Get the IOC container kernel that is the underlying resolution technology.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.Dispose">
            <summary>
            Dispose of the resources.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.Resolve``1(System.Object[])">
            <summary>
            Resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of ordered parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.Resolve``1(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of named parameters, these must match a constructor parameter name and associated types.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.Resolve``1">
            <summary>
            Resolved the requested type.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.ResolveAll``1">
            <summary>
            Resolve all instance of the requested type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.ResolveAll(System.Type)">
            <summary>
            Resolve all instance of the requested type <paramref name="requestType"/>.
            </summary>
            <param name="requestType">The request type to resolve,</param>
            <returns>The resolved IEnumberable as an object (can safely be cast to IEnumerable).</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.ResolveNamed``1(System.String,System.Object[])">
            <summary>
            Resolved the requested type with the list of paramaters specified.
            </summary>
            <param name="key">The name of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of ordered parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.ResolveNamed``1(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Resolved the requested type with the list of paramaters specified.
            </summary>
            <param name="key">The name of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of named parameters, these must match a constructor parameter name and associated types.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.ResolveNamed``1(System.String)">
            <summary>
            Resolved the requested type.
            </summary>
            <param name="key">The name of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.ResolveWithKey``1(System.Enum,System.Object[])">
            <summary>
            Resolved the requested type with the list of paramaters specified.
            </summary>
            <param name="key">The key of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of ordered parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.ResolveWithKey``1(System.Object,System.Object[])">
            <summary>
            Resolved the requested type with the list of paramaters specified.
            </summary>
            <param name="key">The key of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of named parameters, these must match a constructor parameter name and associated types.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.ResolveWithKey``1(System.Enum,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Resolved the requested type with the list of paramaters specified.
            </summary>
            <param name="key">The key of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of ordered parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.ResolveWithKey``1(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Resolved the requested type with the list of paramaters specified.
            </summary>
            <param name="key">The key of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of named parameters, these must match a constructor parameter name and associated types.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.ResolveWithKey``1(System.Enum)">
            <summary>
            Resolved the requested type with the list of paramaters specified.
            </summary>
            <param name="key">The key of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.ResolveWithKey``1(System.Object)">
            <summary>
            Resolved the requested type with the list of paramaters specified.
            </summary>
            <param name="key">The key of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryGetAllResolutions``1">
            <summary>
            Try and get all the resolutions for the type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type to resolve</typeparam>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryGetAllResolutions(System.Type)">
            <summary>
            Try and get all the resolutions for the type <paramref name="typeToResolve"/>
            </summary>
            <param name="typeToResolve">The type to resolve</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryGetResolution``1(System.Object)">
            <summary>
            Try and get the resolution for the type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type to resolve</typeparam>
            <param name="key">An optional key, to only resolve those.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryGetResolution(System.Type,System.Object)">
            <summary>
            Try and get the resolution for the type <paramref name="typeToResolve"/>
            </summary>
            <param name="typeToResolve">The type to resolve</param>
            <param name="key">An optional key, to only resolve those.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryResolve(System.Type)">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <param name="requestType">The request type</param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryResolve``1(System.Object[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of ordered parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryResolve``1(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of named parameters, these must match a constructor parameter name and associated types.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryResolve``1">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryResolveNamed``1(System.String,System.Object[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The name of the resolution request.</param>
            <param name="parameters">
            A list of named parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryResolveNamed``1(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The name of the resolution request.</param>
            <param name="parameters">
            A list of named parameters, these must match a constructor parameter name and associated types.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryResolveNamed``1(System.String)">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The name of the resolution request.</param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryResolveNamed(System.Type,System.String,System.Object[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <param name="requestType">The request type</param>
            <param name="key">The name of the resolution request.</param>
            <param name="parameters">
            A list of named parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryResolveWithKey``1(System.Enum,System.Object[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The key of the resolution request.</param>
            <param name="parameters">
            A list of named parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryResolveWithKey``1(System.Object,System.Object[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The key of the resolution request.</param>
            <param name="parameters">
            A list of named parameters, these must match a constructor parameter name and associated types.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryResolveWithKey``1(System.Enum,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The key of the resolution request.</param>
            <param name="parameters">
            A list of named parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryResolveWithKey``1(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The key of the resolution request.</param>
            <param name="parameters">
            A list of named parameters, these must match a constructor parameter name and associated types.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryResolveWithKey``1(System.Enum)">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The key of the resolution request.</param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryResolveWithKey``1(System.Object)">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The key of the resolution request.</param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryResolveWithKey(System.Type,System.Enum,System.Object[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <param name="requestType">The request type</param>
            <param name="key">The name of the resolution request.</param>
            <param name="parameters">
            A list of named parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.TryResolveWithKey(System.Type,System.Object,System.Object[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <param name="requestType">The request type</param>
            <param name="key">The name of the resolution request.</param>
            <param name="parameters">
            A list of named parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyResolver.Dispose(System.Boolean)">
            <summary>
            Dispose of any resources
            </summary>
            <param name="disposing">Indicate that the method was called during the dispose method.</param>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencySingletionResolution`2">
            <summary>
            Dependency singleton resolution is used when you want to define a resolution that needs to
            be resolved once and then always return the same instance.
            </summary>
            <typeparam name="TInfo">The <see cref="T:ZarDevs.DependencyInjection.IDependencyInfo"/> describing this resolution.</typeparam>
            <typeparam name="TResolution">
            The underlying <see cref="T:ZarDevs.DependencyInjection.IDependencyResolution"/> that will be used to resolve the initial instance.
            </typeparam>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencySingletionResolution`2.#ctor(`1)">
            <summary>
            Create a new instance of the singleton resolution.
            </summary>
            <param name="resolution">
            The underlying resolution that will be used to initialy resolve with.
            </param>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencySingletionResolution`2.Info">
            <summary>
            The <see cref="T:ZarDevs.DependencyInjection.IDependencyInfo"/> impementation describing this resolution.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencySingletionResolution`2.Key">
            <summary>
            The key that is associated to this resolution.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencySingletionResolution`2.ResolvedTypes">
            <summary>
            Get the request type that this resolution is for.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencySingletionResolution`2.Dispose">
            <summary>
            Dispose of the underlying resources. If any <see cref="T:ZarDevs.DependencyInjection.IDependencyResolution"/>
            implements <see cref="T:System.IDisposable"/> that will be called.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencySingletionResolution`2.MakeConcrete(System.Type)">
            <summary>
            Make a concrete singleton resolution
            </summary>
            <param name="concreteRequest">The concrete request type.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencySingletionResolution`2.Resolve(System.Object[])">
            <summary>
            Initially resolve the instance and from then always return the instance.
            </summary>
            <param name="args">
            A list of ordered constructor arguments. They will be used if the instance has not been
            resolved, if it has, they will be ignored
            </param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencySingletionResolution`2.Resolve(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Initially resolve the instance and from then always return the instance.
            </summary>
            <param name="args">
            A list of named constructor arguments. They will be used if the instance has not been
            resolved, if it has, they will be ignored
            </param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencySingletionResolution`2.Resolve">
            <summary>
            Initially resolve the instance and from then always return the instance.
            </summary>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencySingletionResolution`2.Resolve(ZarDevs.DependencyInjection.IDependencyContext)">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="context">The dependency context.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencySingletionResolution`2.Dispose(System.Boolean)">
            <summary>
            Dispose of the underlying resources. If any <see cref="T:ZarDevs.DependencyInjection.IDependencyResolution"/>
            implements <see cref="T:System.IDisposable"/> that will be called.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencySingletonInstance">
            <summary>
            Dpenedncy instance resolution, this will always return the instance described by the <see cref="T:ZarDevs.DependencyInjection.IDependencyInstanceInfo"/>
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencySingletonInstance.#ctor(ZarDevs.DependencyInjection.IDependencyInstanceInfo)">
            <summary>
            Create a new instance of of the dependency resolution.
            </summary>
            <param name="info">The the <see cref="T:ZarDevs.DependencyInjection.IDependencyInstanceInfo"/> that describes this resolution.</param>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencySingletonInstance.Key">
            <summary>
            The key that is associated to this resolution.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencySingletonInstance.ResolvedTypes">
            <summary>
            Get the request type that this resolution is for.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencySingletonInstance.Dispose">
            <summary>
            Dispose of the underlying resources. If any <see cref="T:ZarDevs.DependencyInjection.IDependencyResolution"/>
            implements <see cref="T:System.IDisposable"/> that will be called.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencySingletonInstance.MakeConcrete(System.Type)">
            <summary>
            This is not supported by this class.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencySingletonInstance.Resolve">
            <summary>
            Returns the instance in the described <see cref="T:ZarDevs.DependencyInjection.IDependencyInstanceInfo"/>
            </summary>
            <returns>Returns the instance in the described <see cref="P:ZarDevs.DependencyInjection.IDependencyInstanceInfo.Instance"/></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencySingletonInstance.Resolve(System.Object[])">
            <summary>
            Returns the instance in the described <see cref="T:ZarDevs.DependencyInjection.IDependencyInstanceInfo"/>
            </summary>
            <param name="args">Never used.</param>
            <returns>Returns the instance in the described <see cref="P:ZarDevs.DependencyInjection.IDependencyInstanceInfo.Instance"/></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencySingletonInstance.Resolve(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Returns the instance in the described <see cref="T:ZarDevs.DependencyInjection.IDependencyInstanceInfo"/>
            </summary>
            <param name="args">Never used.</param>
            <returns>Returns the instance in the described <see cref="P:ZarDevs.DependencyInjection.IDependencyInstanceInfo.Instance"/></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencySingletonInstance.Resolve(ZarDevs.DependencyInjection.IDependencyContext)">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="context">The dependency context.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencySingletonInstance.Dispose(System.Boolean)">
            <summary>
            Dispose of the underlying resources. If any <see cref="T:ZarDevs.DependencyInjection.IDependencyResolution"/>
            implements <see cref="T:System.IDisposable"/> that will be called.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencyTypeResolution">
            <summary>
            Dependency type resolution that will resolve the <see cref="P:ZarDevs.DependencyInjection.IDependencyInfo.ResolvedTypes"/>
            and will call the <see cref="P:ZarDevs.DependencyInjection.IDependencyFactoryInfo.FactoryType"/><see cref="P:ZarDevs.DependencyInjection.IDependencyFactoryInfo.MethodName"/>
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyTypeResolution.#ctor(ZarDevs.DependencyInjection.IDependencyTypeInfo,ZarDevs.DependencyInjection.IDependencyTypeActivator)">
            <summary>
            Create a new instance of the dependency type resolution.
            </summary>
            <param name="info">The type information describing this resolution.</param>
            <param name="activator">
            The activator that will be used to return an instance of the <see cref="P:ZarDevs.DependencyInjection.IDependencyTypeInfo.ResolutionType"/>
            </param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyTypeResolution.Resolve">
            <summary>
            Resolve and return the instance
            </summary>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyTypeResolution.Resolve(System.Object[])">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="args">A list of ordered constructor arguments.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyTypeResolution.Resolve(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="args">A list of named constructor arguments.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyTypeResolution.Resolve(ZarDevs.DependencyInjection.IDependencyContext)">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="context">The dependency context.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyTypeResolution.OnMakeConcrete(System.Type[])">
            <summary>
            Override to make a resolution, otherwise a <see cref="T:System.NotSupportedException"/> will be thrown.
            </summary>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns></returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.FactoryDependencyScopeCompiler">
            <summary>
            Compiler for <see cref="T:ZarDevs.DependencyInjection.IDependencyFactoryInfo"/>
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.FactoryDependencyScopeCompiler.#ctor(ZarDevs.DependencyInjection.IDependencyResolutionFactory,ZarDevs.DependencyInjection.DependyBuilderScopes)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.DependencyInjection.FactoryDependencyScopeCompiler"/>
            </summary>
            <param name="resolutionFactory">An instance of the resolution factory.</param>
            <param name="scopes">Specify the scopes that this is valid for.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="resolutionFactory"/> is null.</exception>
        </member>
        <member name="M:ZarDevs.DependencyInjection.FactoryDependencyScopeCompiler.OnRegisterTransient(ZarDevs.DependencyInjection.IDependencyResolutionConfiguration,ZarDevs.DependencyInjection.IDependencyFactoryInfo)">
            <inheritdoc/>
        </member>
        <member name="M:ZarDevs.DependencyInjection.FactoryDependencyScopeCompiler.OnRegisterSingleton(ZarDevs.DependencyInjection.IDependencyResolutionConfiguration,ZarDevs.DependencyInjection.IDependencyFactoryInfo)">
            <inheritdoc/>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyResolution">
            <summary>
            Define the dependency resolution and how to resolve it.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IDependencyResolution.Key">
            <summary>
            The key that is associated to this resolution.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IDependencyResolution.ResolvedTypes">
            <summary>
            Get the request type that this resolution is for.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolution.MakeConcrete(System.Type)">
            <summary>
            Create a concrete resolution out of a generic.
            </summary>
            <param name="concreteRequest">The concrete request type.</param>
            <returns>A resolution</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolution.Resolve">
            <summary>
            Resolve and return the instance
            </summary>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolution.Resolve(System.Object[])">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="args">A list of ordered constructor arguments.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolution.Resolve(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="args">A list of named constructor arguments.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolution.Resolve(ZarDevs.DependencyInjection.IDependencyContext)">
            <summary>
            Resolve and return the instance
            </summary>
            <param name="context">The dependency context.</param>
            <returns>An instance for this resolution.</returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyResolution`1">
            <summary>
            Define the dependency resolution for the <see cref="T:ZarDevs.DependencyInjection.IDependencyInfo"/> implementation and
            how to resolve it.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IDependencyResolution`1.Info">
            <summary>
            The <see cref="T:ZarDevs.DependencyInjection.IDependencyInfo"/> impementation describing this resolution.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyResolutionFactory">
            <summary>
            Dependency resolution factory is used to create instances of <see cref="T:ZarDevs.DependencyInjection.IDependencyResolution"/> base of the type of <see cref="T:ZarDevs.DependencyInjection.IDependencyInfo"/>
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolutionFactory.ResolutionFor(ZarDevs.DependencyInjection.IDependencyTypeInfo)">
            <summary>
            Create a resolution for <see cref="T:ZarDevs.DependencyInjection.IDependencyTypeInfo"/>
            </summary>
            <param name="info">The dependency info</param>
            <returns>A resolution</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolutionFactory.ResolutionFor(ZarDevs.DependencyInjection.IDependencyMethodInfo)">
            <summary>
            Create a resolution for <see cref="T:ZarDevs.DependencyInjection.IDependencyTypeInfo"/>
            </summary>
            <param name="info">The dependency info</param>
            <returns>A resolution</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolutionFactory.ResolutionFor(ZarDevs.DependencyInjection.IDependencyInstanceInfo)">
            <summary>
            Create a resolution for <see cref="T:ZarDevs.DependencyInjection.IDependencyMethodInfo"/>
            </summary>
            <param name="info">The dependency info</param>
            <returns>A resolution</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyResolutionFactory.ResolutionFor(ZarDevs.DependencyInjection.IDependencyFactoryInfo)">
            <summary>
            Create a resolution for <see cref="T:ZarDevs.DependencyInjection.IDependencyFactoryInfo"/>
            </summary>
            <param name="info">The dependency info</param>
            <returns>A resolution</returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyTypeActivator">
            <summary>
            Dpendency type activator used to resolve the type and return the object for the defined
            dependency type.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyTypeActivator.Resolve(ZarDevs.DependencyInjection.IDependencyTypeInfo)">
            <summary>
            Resolve an instance based on the typed information.
            </summary>
            <param name="info">
            The dependency type information describing the <see
            cref="P:ZarDevs.DependencyInjection.IDependencyInfo.ResolvedTypes"/>, <see cref="P:ZarDevs.DependencyInjection.IDependencyInfo.Scope"/> and <see cref="P:ZarDevs.DependencyInjection.IDependencyInfo.Key"/>.
            </param>
            <returns>An resolved object of the type <see cref="P:ZarDevs.DependencyInjection.IDependencyTypeInfo.ResolutionType"/>.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyTypeActivator.Resolve(ZarDevs.DependencyInjection.IDependencyTypeInfo,System.Object[])">
            <summary>
            Resolve an instance based on the typed information.
            </summary>
            <param name="info">
            The dependency type information describing the <see
            cref="P:ZarDevs.DependencyInjection.IDependencyInfo.ResolvedTypes"/>, <see cref="P:ZarDevs.DependencyInjection.IDependencyInfo.Scope"/> and <see cref="P:ZarDevs.DependencyInjection.IDependencyInfo.Key"/>.
            </param>
            <param name="args">An list of args in order of the constructor.</param>
            <returns>An resolved object of the type <see cref="P:ZarDevs.DependencyInjection.IDependencyTypeInfo.ResolutionType"/>.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyTypeActivator.Resolve(ZarDevs.DependencyInjection.IDependencyTypeInfo,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Resolve an instance based on the typed information.
            </summary>
            <param name="info">
            The dependency type information describing the <see
            cref="P:ZarDevs.DependencyInjection.IDependencyInfo.ResolvedTypes"/>, <see cref="P:ZarDevs.DependencyInjection.IDependencyInfo.Scope"/> and <see cref="P:ZarDevs.DependencyInjection.IDependencyInfo.Key"/>.
            </param>
            <param name="args">An list of named args of the constructor.</param>
            <returns>An resolved object of the type <see cref="P:ZarDevs.DependencyInjection.IDependencyTypeInfo.ResolutionType"/>.</returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.InstanceDependencyScopeCompiler">
            <summary>
            Compiler for <see cref="T:ZarDevs.DependencyInjection.IDependencyTypeInfo"/>
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.InstanceDependencyScopeCompiler.#ctor(ZarDevs.DependencyInjection.IDependencyResolutionFactory)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.DependencyInjection.InstanceDependencyScopeCompiler"/>
            </summary>
            <param name="resolutionFactory">An instance of the resolution factory.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="resolutionFactory"/> is null.</exception>
        </member>
        <member name="M:ZarDevs.DependencyInjection.InstanceDependencyScopeCompiler.CanBind(ZarDevs.DependencyInjection.IDependencyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:ZarDevs.DependencyInjection.InstanceDependencyScopeCompiler.OnBind(ZarDevs.DependencyInjection.IDependencyResolutionConfiguration,ZarDevs.DependencyInjection.IDependencyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:ZarDevs.DependencyInjection.InstanceDependencyScopeCompiler.OnBind(ZarDevs.DependencyInjection.IDependencyResolutionConfiguration,ZarDevs.DependencyInjection.IDependencyInstanceInfo)">
            <summary>
            Bind the definition to the container.
            </summary>
            <param name="container">The dependency container</param>
            <param name="definition">The dependency info</param>
        </member>
        <member name="T:ZarDevs.DependencyInjection.MethodDependencyScopeCompiler">
            <summary>
            Compiler for <see cref="T:ZarDevs.DependencyInjection.IDependencyMethodInfo"/>
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.MethodDependencyScopeCompiler.#ctor(ZarDevs.DependencyInjection.IDependencyResolutionFactory,ZarDevs.DependencyInjection.DependyBuilderScopes)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.DependencyInjection.TypedDependencyScopeCompiler"/>
            </summary>
            <param name="resolutionFactory">An instance of the resolution factory.</param>
            <param name="scopes">Specify the scopes that this is valid for.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="resolutionFactory"/> is null.</exception>
        </member>
        <member name="M:ZarDevs.DependencyInjection.MethodDependencyScopeCompiler.OnRegisterTransient(ZarDevs.DependencyInjection.IDependencyResolutionConfiguration,ZarDevs.DependencyInjection.IDependencyMethodInfo)">
            <inheritdoc/>
        </member>
        <member name="M:ZarDevs.DependencyInjection.MethodDependencyScopeCompiler.OnRegisterSingleton(ZarDevs.DependencyInjection.IDependencyResolutionConfiguration,ZarDevs.DependencyInjection.IDependencyMethodInfo)">
            <inheritdoc/>
        </member>
        <member name="T:ZarDevs.DependencyInjection.TypedDependencyScopeCompiler">
            <summary>
            Compiler for <see cref="T:ZarDevs.DependencyInjection.IDependencyTypeInfo"/>
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.TypedDependencyScopeCompiler.#ctor(ZarDevs.DependencyInjection.IDependencyResolutionFactory,ZarDevs.DependencyInjection.DependyBuilderScopes)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.DependencyInjection.TypedDependencyScopeCompiler"/>
            </summary>
            <param name="resolutionFactory">An instance of the resolution factory.</param>
            <param name="scopes">Specify the scopes that this is valid for.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="resolutionFactory"/> is null.</exception>
        </member>
        <member name="M:ZarDevs.DependencyInjection.TypedDependencyScopeCompiler.OnRegisterTransient(ZarDevs.DependencyInjection.IDependencyResolutionConfiguration,ZarDevs.DependencyInjection.IDependencyTypeInfo)">
            <inheritdoc/>
        </member>
        <member name="M:ZarDevs.DependencyInjection.TypedDependencyScopeCompiler.OnRegisterSingleton(ZarDevs.DependencyInjection.IDependencyResolutionConfiguration,ZarDevs.DependencyInjection.IDependencyTypeInfo)">
            <inheritdoc/>
        </member>
    </members>
</doc>
