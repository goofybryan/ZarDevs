<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZarDevs.Http.Api.Serializers</name>
    </assembly>
    <members>
        <member name="T:ZarDevs.Http.Api.Serializers.ApiCommandContentSerializerFormUrlEncoded">
            <summary>
            Form url encoded serializer that can handle content that are of type ' <see cref="T:System.Collections.Generic.IEnumerable`1"/>' where T is <see cref="T:System.Collections.Generic.KeyValuePair`2"/>, <see cref="T:System.ValueTuple`2"/> and
            <see cref="T:System.Tuple`2"/>. T1 and T2 is ( <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.Serializers.ApiCommandContentSerializerFormUrlEncoded.#ctor(System.Collections.Generic.IList{ZarDevs.Http.Api.Serializers.IDefaultFormUrlEncodedContentParser})">
            <summary>
            Create new instance of the serializer
            </summary>
            <param name="parsers"></param>
        </member>
        <member name="P:ZarDevs.Http.Api.Serializers.ApiCommandContentSerializerFormUrlEncoded.MediaTypes">
            <summary>
            Get the content type that can be added to the headers or compared to.
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.Serializers.ApiCommandContentSerializerFormUrlEncoded.IsValidFor(System.String)">
            <summary>
            Check if the <paramref name="mediaType"/> is valid for this serializer.
            </summary>
            <param name="mediaType"></param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.Http.Api.Serializers.ApiCommandContentSerializerFormUrlEncoded.Serialize(ZarDevs.Http.Api.IApiCommandRequest)">
            <summary>
            Serialize the <see cref="P:ZarDevs.Http.Api.IApiCommandRequest.Content"/> to a <see cref="T:System.Net.Http.HttpContent"/>
            </summary>
            <param name="request">The request to serialize.</param>
            <returns>The <see cref="T:System.Net.Http.HttpContent"/> abstract object.</returns>
        </member>
        <member name="T:ZarDevs.Http.Api.Serializers.IDefaultFormUrlEncodedContentParser">
            <summary>
            A parser interface that will try and take a <see cref="T:System.Object"/> and cast it to various enumerables of <see cref="T:System.Tuple`2"/> or <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where key and value is a string.
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.Serializers.IDefaultFormUrlEncodedContentParser.TryParse(System.Object,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Parse the <paramref name="value"/> to the appropriate value.
            </summary>
            <param name="value">The value to parse</param>
            <param name="parsed">The parsed value</param>
            <returns>Returns a true of the value was parsed.</returns>
        </member>
        <member name="T:ZarDevs.Http.Api.Serializers.DefaultFormUrlEncodedContentParser">
            <summary>
            A parser that will try and take a <see cref="T:System.Object"/> and cast it to various enumerables of <see cref="T:System.Tuple`2"/> or <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where key and value is a string.
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.Serializers.DefaultFormUrlEncodedContentParser.TryParse(System.Object,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Parse the <paramref name="value"/> to the appropriate value.
            </summary>
            <param name="value">The value to parse</param>
            <param name="parsed">The parsed value</param>
            <returns>Returns a true of the value was parsed.</returns>
        </member>
        <member name="T:ZarDevs.Http.Api.ApiCommandContentSerializerJson">
            <summary>
            Serialize a <see cref="T:ZarDevs.Http.Api.IApiCommandRequest"/> content to HttpContent and deserialize the content of a <see cref="T:System.Net.Http.HttpResponseMessage"/> using the JSON format.
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandContentSerializerJson.#ctor(System.Text.Encoding,Newtonsoft.Json.Formatting)">
            <summary>
            Create a new instance of this class
            </summary>
            <param name="encoding">Optionally specify the content encoding, otherwise defaults <see cref="P:System.Text.Encoding.Default"/></param>
            <param name="formatting">Optionally specift the formatting, otherwise defaults to <see cref="F:Newtonsoft.Json.Formatting.None"/></param>
        </member>
        <member name="P:ZarDevs.Http.Api.ApiCommandContentSerializerJson.MediaTypes">
            <summary>
            Get the content type that can be added to the headers or compared to.
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandContentSerializerJson.DeserializeAsync``1(System.Net.Http.HttpContent)">
            <summary>
            Deserialize the content to the expected type <typeparamref name="TContent"/>
            </summary>
            <param name="content">The Http content to deserialize.</param>
            <typeparam name="TContent">The expected content type</typeparam>
            <returns>The deserialized content of type <typeparamref name="TContent"/></returns>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandContentSerializerJson.IsValidFor(System.String)">
            <summary>
            Check if the <paramref name="mediaType"/> is valid for this serializer.
            </summary>
            <param name="mediaType"></param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandContentSerializerJson.Serialize(ZarDevs.Http.Api.IApiCommandRequest)">
            <summary>
            Serialize the <see cref="P:ZarDevs.Http.Api.IApiCommandRequest.Content"/> to a <see cref="T:System.Net.Http.HttpContent"/>
            </summary>
            <param name="request">The request to serialize.</param>
            <returns>The <see cref="T:System.Net.Http.HttpContent"/> abstract object.</returns>
        </member>
        <member name="T:ZarDevs.Http.Api.ApiCommandContentSerializerString">
            <summary>
            Serialize a <see cref="T:ZarDevs.Http.Api.IApiCommandRequest"/> content to HttpContent and deserialize the content of a <see cref="T:System.Net.Http.HttpResponseMessage"/> using the text format.
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandContentSerializerString.#ctor(System.Text.Encoding)">
            <summary>
            Create a new instance of the class.
            </summary>
            <param name="encoding">Optionally specify the content encoding, otherwise defaults <see cref="P:System.Text.Encoding.Default"/></param>
        </member>
        <member name="P:ZarDevs.Http.Api.ApiCommandContentSerializerString.MediaTypes">
            <summary>
            Get the content type that can be added to the headers or compared to.
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandContentSerializerString.DeserializeAsync``1(System.Net.Http.HttpContent)">
            <summary>
            Deserialize the content to the expected type <typeparamref name="TContent"/>
            </summary>
            <param name="content">The Http content to deserialize.</param>
            <typeparam name="TContent">The expected content type</typeparam>
            <returns>The deserialized content of type <typeparamref name="TContent"/></returns>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandContentSerializerString.IsValidFor(System.String)">
            <summary>
            Check if the <paramref name="mediaType"/> is valid for this serializer.
            </summary>
            <param name="mediaType"></param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandContentSerializerString.Serialize(ZarDevs.Http.Api.IApiCommandRequest)">
            <summary>
            Serialize the <see cref="P:ZarDevs.Http.Api.IApiCommandRequest.Content"/> to a <see cref="T:System.Net.Http.HttpContent"/>
            </summary>
            <param name="request">The request to serialize.</param>
            <returns>The <see cref="T:System.Net.Http.HttpContent"/> abstract object.</returns>
        </member>
        <member name="T:ZarDevs.Http.Api.ApiCommandContentSerializerXml">
            <summary>
            Serialize a <see cref="T:ZarDevs.Http.Api.IApiCommandRequest"/> content to HttpContent and deserialize the content of a <see cref="T:System.Net.Http.HttpResponseMessage"/> using the xml format.
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandContentSerializerXml.#ctor(System.Text.Encoding)">
            <summary>
            Create a new instance of the class.
            </summary>
            <param name="encoding">Optionally specify the content encoding, otherwise defaults <see cref="P:System.Text.Encoding.Default"/></param>
        </member>
        <member name="P:ZarDevs.Http.Api.ApiCommandContentSerializerXml.MediaTypes">
            <summary>
            Get the content type that can be added to the headers or compared to.
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandContentSerializerXml.DeserializeAsync``1(System.Net.Http.HttpContent)">
            <summary>
            Deserialize the content to the expected type <typeparamref name="TContent"/>
            </summary>
            <param name="content">The Http content to deserialize.</param>
            <typeparam name="TContent">The expected content type</typeparam>
            <returns>The deserialized content of type <typeparamref name="TContent"/></returns>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandContentSerializerXml.IsValidFor(System.String)">
            <summary>
            Check if the <paramref name="mediaType"/> is valid for this serializer.
            </summary>
            <param name="mediaType"></param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandContentSerializerXml.Serialize(ZarDevs.Http.Api.IApiCommandRequest)">
            <summary>
            Serialize the <see cref="P:ZarDevs.Http.Api.IApiCommandRequest.Content"/> to a <see cref="T:System.Net.Http.HttpContent"/>
            </summary>
            <param name="request">The request to serialize.</param>
            <returns>The <see cref="T:System.Net.Http.HttpContent"/> abstract object.</returns>
        </member>
    </members>
</doc>
