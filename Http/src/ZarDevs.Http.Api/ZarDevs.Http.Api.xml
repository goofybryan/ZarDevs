<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZarDevs.Http.Api</name>
    </assembly>
    <members>
        <member name="T:ZarDevs.Http.Api.ApiCommandAsync">
            <summary>
            Api abstract command that implements the base construct of the API Command infrastructure.
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandAsync.#ctor(ZarDevs.Http.Client.IApiHttpClient,ZarDevs.Http.Api.IHttpResponseFactory)">
            <summary>
            Protected constructor that enforces the required variables needed for this implementation
            </summary>
            <param name="httpClient">The http client needed to call</param>
            <param name="responseFactory">The response factory that is need to generate a <see cref="T:ZarDevs.Http.Api.IApiCommandResponse"/></param>
        </member>
        <member name="P:ZarDevs.Http.Api.ApiCommandAsync.HttpClient">
            <summary>
            The http client
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandAsync.ExecuteAsync(ZarDevs.Http.Api.IApiCommandRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandAsync.CreateResponse(System.Net.Http.HttpResponseMessage)">
            <inheritdoc/>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandAsync.OnApiCallAsync(ZarDevs.Http.Api.IApiCommandRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ZarDevs.Http.Api.IApiCommandContentTypeMap`1">
            <summary>
            Api command content type map interface used to retrieve the <typeparamref name="TContentType"/> value for the media type.
            </summary>
        </member>
        <member name="P:ZarDevs.Http.Api.IApiCommandContentTypeMap`1.Item(System.String)">
            <summary>
            Get the <typeparamref name="TContentType"/> value from the map for the specified <paramref name="mediaType"/>
            </summary>
            <param name="mediaType">The media type name</param>
            <returns>The specified <typeparamref name="TContentType"/> value.</returns>
            <exception cref="T:ZarDevs.Http.Api.ApiCommandContentTypeNotFoundException">This is thrown when no <typeparamref name="TContentType"/> value is found for the <paramref name="mediaType"/></exception>
        </member>
        <member name="M:ZarDevs.Http.Api.IApiCommandContentTypeMap`1.TryGetSerializer(System.String,`0@)">
            <summary>
            Try and get the <typeparamref name="TContentType"/> value from the map for the specified <paramref name="mediaType"/>
            </summary>
            <param name="mediaType">The media type name</param>
            <param name="contentType">Return specified <typeparamref name="TContentType"/> value.</param>
            <returns>A <c>true</c> if the value is found.</returns>
        </member>
        <member name="T:ZarDevs.Http.Api.ApiCommandContentTypeMap`1">
            <summary>
            Api command content serializer map used to look up the appropriate <typeparamref name="TContentType"/> value for the specified media type
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandContentTypeMap`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Create a new instance of the map.
            </summary>
            <param name="contentTypes">Specify the list of content types to map.</param>
        </member>
        <member name="P:ZarDevs.Http.Api.ApiCommandContentTypeMap`1.Item(System.String)">
            <summary>
            Get the <typeparamref name="TContentType"/> value from the map for the specified <paramref name="mediaType"/>
            </summary>
            <param name="mediaType">The media type name</param>
            <returns>The specified <typeparamref name="TContentType"/> value.</returns>
            <exception cref="T:ZarDevs.Http.Api.ApiCommandContentTypeNotFoundException">This is thrown when no <typeparamref name="TContentType"/> value is found for the <paramref name="mediaType"/></exception>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandContentTypeMap`1.TryGetSerializer(System.String,`0@)">
            <summary>
            Try and get the <typeparamref name="TContentType"/> value from the map for the specified <paramref name="mediaType"/>
            </summary>
            <param name="mediaType">The media type name</param>
            <param name="contentType">Return specified <typeparamref name="TContentType"/> value.</param>
            <returns>A <c>true</c> if the value is found.</returns>
        </member>
        <member name="T:ZarDevs.Http.Api.ApiCommandContentTypeNotFoundException">
            <summary>
            Exception thrown when the <see cref="T:ZarDevs.Http.Api.ApiCommandContentTypeMap`1"/> cannot find a <see cref="T:ZarDevs.Http.Api.IApiCommandContent"/> value for the media type..
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandContentTypeNotFoundException.#ctor(System.String)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.Http.Api.ApiCommandContentTypeNotFoundException"/> exception.
            </summary>
            <param name="mediaType">The media type that could not be found.</param>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandContentTypeNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.Http.Api.ApiCommandContentTypeNotFoundException"/> exception.
            </summary>
            <param name="mediaType">The media type that could not be found.</param>
            <param name="message">The message explaining the exeption.</param>
        </member>
        <member name="P:ZarDevs.Http.Api.ApiCommandContentTypeNotFoundException.MediaType">
            <summary>
            The media type the exeption was thrown for.
            </summary>
        </member>
        <member name="T:ZarDevs.Http.Api.ApiCommandFactory">
            <summary>
            Api command factory used to create commands
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandFactory.#ctor(ZarDevs.Http.Client.IApiHttpFactory,ZarDevs.Http.Api.IHttpResponseFactory,ZarDevs.Http.Api.IApiCommandContentTypeMap{ZarDevs.Http.Api.IApiCommandContentSerializer})">
            <summary>
            Create a new instance of the command factory.
            </summary>
            <param name="httpFactory">An instance of the api http factory used to get <see cref="T:ZarDevs.Http.Client.IApiHttpClient"/> instances.</param>
            <param name="responseFactory">An instance of the response factory to interpret the responses from the server.</param>
            <param name="serializers">A map of serializers that is used deserialize the serialize the content that is sent to the server.</param>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandFactory.CreateDeleteCommand(System.Object)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.Http.Api.IApiCommandAsync"/> that is for deleting.
            </summary>
            <param name="apiClientKey">An option api client key that will be used to resolve the ApiHttpClient. Default is no key (null)</param>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandFactory.CreateGetCommand(System.Object)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.Http.Api.IApiCommandAsync"/> that is for getting.
            </summary>
            <param name="apiClientKey">An option api client key that will be used to resolve the ApiHttpClient. Default is no key (null)</param>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandFactory.CreatePatchCommand(System.String,System.Object)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.Http.Api.IApiCommandAsync"/> that is for patching.
            </summary>
            <param name="mediaType">Specify the media type that will be used to send any content. This will be used to serialize any content to the api call.</param>
            <param name="apiClientKey">An option api client key that will be used to resolve the ApiHttpClient. Default is no key (null)</param>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandFactory.CreatePostCommand(System.String,System.Object)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.Http.Api.IApiCommandAsync"/> that is for posting.
            </summary>
            <param name="mediaType">Specify the media type that will be used to send any content. This will be used to serialize any content to the api call.</param>
            <param name="apiClientKey">An option api client key that will be used to resolve the ApiHttpClient. Default is no key (null)</param>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandFactory.CreatePutCommand(System.String,System.Object)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.Http.Api.IApiCommandAsync"/> that is for putting.
            </summary>
            <param name="mediaType">Specify the media type that will be used to send any content. This will be used to serialize any content to the api call.</param>
            <param name="apiClientKey">An option api client key that will be used to resolve the ApiHttpClient. Default is no key (null)</param>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandFactory.CreateRequest(System.Uri,System.Object)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.Http.Api.IApiCommandRequest"/> that is used during the request.
            </summary>
            <param name="apiUrl">Specify the api url</param>
            <param name="content">Specify any content that is needed to be sent.</param>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiCommandFactory.CreateSendCommand(System.String,System.Net.Http.HttpMethod,System.Object)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.Http.Api.IApiCommandAsync"/>. This command is meant to be used as a custom command when the normal pattern does not fit.
            </summary>
            <param name="mediaType">Specify the media type that will be used to send any content. This will be used to serialize any content to the api call.</param>
            <param name="sendMethod">Specify the <see cref="T:System.Net.Http.HttpMethod"/> that the command with use.</param>
            <param name="apiClientKey">An option api client key that will be used to resolve the ApiHttpClient. Default is no key (null)</param>
        </member>
        <member name="T:ZarDevs.Http.Api.ApiContentCommandAsync">
            <summary>
            Api abstract command for content that implements the base construct of the API Command infrastructure.
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiContentCommandAsync.#ctor(ZarDevs.Http.Client.IApiHttpClient,ZarDevs.Http.Api.IApiCommandContentSerializer,ZarDevs.Http.Api.IHttpResponseFactory)">
            <summary>
            Protected constructor that enforces the required variables needed for this implementation.
            </summary>
            <param name="httpClient">The <see cref="T:ZarDevs.Http.Client.IApiHttpClient"/> client used for sending the delete request.</param>
            <param name="serializer">The serializer that is used to serialize the <see cref="P:ZarDevs.Http.Api.IApiCommandRequest.Content"/> to <see cref="T:System.Net.Http.HttpContent"/>.</param>
            <param name="responseFactory">The <see cref="T:ZarDevs.Http.Api.IHttpResponseFactory"/> factory used for creating the response.</param>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiContentCommandAsync.OnApiCallAsync(ZarDevs.Http.Api.IApiCommandRequest,System.Threading.CancellationToken)">
            <summary>
            Call the specific api call for the specified <paramref name="request"/>
            </summary>
            <param name="request">The request message that contains the content need for the server call.</param>
            <param name="cancellation">Cancelation Token</param>
            <returns>The <see cref="T:System.Net.Http.HttpResponseMessage"/> from the <see cref="T:ZarDevs.Http.Client.IApiHttpClient"/> call.</returns>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiContentCommandAsync.OnApiCall(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Call the specific api call to the specified <paramref name="apiUri"/> with the <paramref name="content"/> content.
            </summary>
            <param name="apiUri">The api <see cref="T:System.Uri"/>.</param>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> to call.</param>
            <param name="cancellation">Cancelation token</param>
            <returns>The <see cref="T:System.Net.Http.HttpResponseMessage"/> from the <see cref="T:ZarDevs.Http.Client.IApiHttpClient"/> call.</returns>
        </member>
        <member name="T:ZarDevs.Http.Api.ApiDeleteCommandAsync">
            <summary>
            Command for deleting, this will call the <see cref="M:ZarDevs.Http.Client.IApiHttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiDeleteCommandAsync.#ctor(ZarDevs.Http.Client.IApiHttpClient,ZarDevs.Http.Api.IHttpResponseFactory)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.Http.Api.ApiDeleteCommandAsync"/>
            </summary>
            <param name="httpClient">The <see cref="T:ZarDevs.Http.Client.IApiHttpClient"/> client used for sending the delete request.</param>
            <param name="responseFactory">The <see cref="T:ZarDevs.Http.Api.IHttpResponseFactory"/> factory used for creating the response.</param>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiDeleteCommandAsync.OnApiCallAsync(ZarDevs.Http.Api.IApiCommandRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ZarDevs.Http.Api.ApiGetCommandAsync">
            <summary>
            Command for getting, this will call the <see cref="M:ZarDevs.Http.Client.IApiHttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiGetCommandAsync.#ctor(ZarDevs.Http.Client.IApiHttpClient,ZarDevs.Http.Api.IHttpResponseFactory)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.Http.Api.ApiGetCommandAsync"/>
            </summary>
            <param name="httpClient">The <see cref="T:ZarDevs.Http.Client.IApiHttpClient"/> client used for sending the delete request.</param>
            <param name="responseFactory">The <see cref="T:ZarDevs.Http.Api.IHttpResponseFactory"/> factory used for creating the response.</param>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiGetCommandAsync.OnApiCallAsync(ZarDevs.Http.Api.IApiCommandRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ZarDevs.Http.Api.ApiPatchCommandAsync">
            <summary>
            Command for patching, this will call the <see cref="M:ZarDevs.Http.Client.IApiHttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiPatchCommandAsync.#ctor(ZarDevs.Http.Client.IApiHttpClient,ZarDevs.Http.Api.IApiCommandContentSerializer,ZarDevs.Http.Api.IHttpResponseFactory)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.Http.Api.ApiPatchCommandAsync"/>
            </summary>
            <param name="httpClient">The <see cref="T:ZarDevs.Http.Client.IApiHttpClient"/> client used for sending the delete request.</param>
            <param name="serializer">The serializer that is used to serialize the <see cref="P:ZarDevs.Http.Api.IApiCommandRequest.Content"/> to <see cref="T:System.Net.Http.HttpContent"/>.</param>
            <param name="responseFactory">The <see cref="T:ZarDevs.Http.Api.IHttpResponseFactory"/> factory used for creating the response.</param>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiPatchCommandAsync.OnApiCall(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ZarDevs.Http.Api.ApiPostCommandAsync">
            <summary>
            Command for posting, this will call the <see cref="M:ZarDevs.Http.Client.IApiHttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiPostCommandAsync.#ctor(ZarDevs.Http.Client.IApiHttpClient,ZarDevs.Http.Api.IApiCommandContentSerializer,ZarDevs.Http.Api.IHttpResponseFactory)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.Http.Api.ApiPatchCommandAsync"/>
            </summary>
            <param name="httpClient">The <see cref="T:ZarDevs.Http.Client.IApiHttpClient"/> client used for sending the delete request.</param>
            <param name="serializer">The serializer that is used to serialize the <see cref="P:ZarDevs.Http.Api.IApiCommandRequest.Content"/> to <see cref="T:System.Net.Http.HttpContent"/>.</param>
            <param name="responseFactory">The <see cref="T:ZarDevs.Http.Api.IHttpResponseFactory"/> factory used for creating the response.</param>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiPostCommandAsync.OnApiCall(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Call the specific api call to the specified <paramref name="apiUri"/> with the <paramref name="content"/> content.
            </summary>
            <param name="apiUri">The api <see cref="T:System.Uri"/>.</param>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> to call.</param>
            <param name="cancellation">Cancelation token</param>
            <returns>The <see cref="T:System.Net.Http.HttpResponseMessage"/> from the <see cref="T:ZarDevs.Http.Client.IApiHttpClient"/> call.</returns>
        </member>
        <member name="T:ZarDevs.Http.Api.ApiPutCommandAsync">
            <summary>
            Command for putting, this will call the <see cref="M:ZarDevs.Http.Client.IApiHttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiPutCommandAsync.#ctor(ZarDevs.Http.Client.IApiHttpClient,ZarDevs.Http.Api.IApiCommandContentSerializer,ZarDevs.Http.Api.IHttpResponseFactory)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.Http.Api.ApiPutCommandAsync"/>
            </summary>
            <param name="httpClient">The <see cref="T:ZarDevs.Http.Client.IApiHttpClient"/> client used for sending the delete request.</param>
            <param name="serializer">The serializer that is used to serialize the <see cref="P:ZarDevs.Http.Api.IApiCommandRequest.Content"/> to <see cref="T:System.Net.Http.HttpContent"/>.</param>
            <param name="responseFactory">The <see cref="T:ZarDevs.Http.Api.IHttpResponseFactory"/> factory used for creating the response.</param>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiPutCommandAsync.OnApiCall(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ZarDevs.Http.Api.ApiSendCommandAsync">
            <summary>
            This command is used when a non-standard call allowing for some customization to the API call, this will call the <see cref="M:ZarDevs.Http.Client.IApiHttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiSendCommandAsync.#ctor(ZarDevs.Http.Client.IApiHttpClient,ZarDevs.Http.Api.IApiCommandContentSerializer,ZarDevs.Http.Api.IHttpResponseFactory,System.Net.Http.HttpMethod)">
            <summary>
            Create a new instance of the <see cref="T:ZarDevs.Http.Api.ApiSendCommandAsync"/>
            </summary>
            <param name="httpClient">The <see cref="T:ZarDevs.Http.Client.IApiHttpClient"/> client used for sending the delete request.</param>
            <param name="serializer">The serializer that is used to serialize the <see cref="P:ZarDevs.Http.Api.IApiCommandRequest.Content"/> to <see cref="T:System.Net.Http.HttpContent"/>.</param>
            <param name="responseFactory">The <see cref="T:ZarDevs.Http.Api.IHttpResponseFactory"/> factory used for creating the response.</param>
            <param name="httpMethod">The <see cref="T:System.Net.Http.HttpMethod"/> that will be used for the API call.</param>
        </member>
        <member name="M:ZarDevs.Http.Api.ApiSendCommandAsync.OnApiCall(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ZarDevs.Http.Api.IHttpResponseFactory">
            <summary>
            Http response factory that is used to create instances for the response and deserialization.
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Api.IHttpResponseFactory.CreateResponse(System.Net.Http.HttpResponseMessage)">
            <summary>
            Create the a <see cref="T:ZarDevs.Http.Api.IApiCommandResponse"/> response from the <see cref="T:System.Net.Http.HttpResponseMessage"/><paramref name="response"/>.
            </summary>
            <param name="response">The <see cref="T:System.Net.Http.HttpResponseMessage"/> from the client.</param>
        </member>
        <member name="M:ZarDevs.Http.Api.IHttpResponseFactory.GetDeserializer(System.String)">
            <summary>
            Get the deserializer for the <paramref name="mediaType"/>
            </summary>
            <param name="mediaType">The media type of the message.</param>
        </member>
    </members>
</doc>
