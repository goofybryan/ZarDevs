<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZarDevs.Http.Security.Jwt</name>
    </assembly>
    <members>
        <member name="T:ZarDevs.Http.Security.Jwt.ConfigureSecurityApi">
            <summary>
            Configure the security the API
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Security.Jwt.ConfigureSecurityApi.ConfigureUserNamePasswordJwt(ZarDevs.Http.Client.IApiHttpFactory)">
            <summary>
            Configure the JWT pipeline, first the refresh token handler -> login handler -> auth handler. Note, these handlers will be ignored if Auth header has already been filled in.
            1. The token handler will try and refresh the token if the access token is expired
            2. The login handler will call the <see cref="T:ZarDevs.Http.Security.ILoginUserPasswordAsync"/> to request the the username and password and will request the server for a new access token.
            3. Will add the access token to the appropriate header value.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="T:ZarDevs.Http.Security.ITokenRefreshRequestBuilder">
            <summary>
            Refresh toke request builder.
            </summary>
        </member>
        <member name="P:ZarDevs.Http.Security.ITokenRefreshRequestBuilder.RefreshToken">
            <summary>
            The refesh token
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Security.ITokenRefreshRequestBuilder.SetRefreshToken(System.String)">
            <summary>
            Set the <see cref="P:ZarDevs.Http.Security.ITokenRefreshRequestBuilder.RefreshToken"/>
            </summary>
            <param name="refreshToken">The refresh token to set.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="T:ZarDevs.Http.Security.ITokenRequestBuilder">
            <summary>
            Token request builder
            </summary>
        </member>
        <member name="P:ZarDevs.Http.Security.ITokenRequestBuilder.ClientId">
            <summary>
            Get the ClientId
            </summary>
        </member>
        <member name="P:ZarDevs.Http.Security.ITokenRequestBuilder.ClientSecret">
            <summary>
            Get the ClientSecret
            </summary>
        </member>
        <member name="P:ZarDevs.Http.Security.ITokenRequestBuilder.GrantType">
            <summary>
            Get the Grant Type
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Security.ITokenRequestBuilder.Build">
            <summary>
            Build the list of parameters
            </summary>
            <returns>A parameter map.</returns>
        </member>
        <member name="M:ZarDevs.Http.Security.ITokenRequestBuilder.SetClientId(System.String)">
            <summary>
            Add the <see cref="P:ZarDevs.Http.Security.ITokenRequestBuilder.ClientId"/>
            </summary>
            <param name="clientId">The client id</param>
            <returns>The current instance</returns>
        </member>
        <member name="M:ZarDevs.Http.Security.ITokenRequestBuilder.SetClientSecret(System.String)">
            <summary>
            Add the <see cref="P:ZarDevs.Http.Security.ITokenRequestBuilder.ClientSecret"/>
            </summary>
            <param name="clientSecret">The client secret</param>
            <returns>The current instance</returns>
        </member>
        <member name="T:ZarDevs.Http.Security.ITokenUsernameRequestBuilder">
            <summary>
            Access token request builder for username and password requests.
            </summary>
        </member>
        <member name="P:ZarDevs.Http.Security.ITokenUsernameRequestBuilder.Password">
            <summary>
            Get the password.
            </summary>
        </member>
        <member name="P:ZarDevs.Http.Security.ITokenUsernameRequestBuilder.Scope">
            <summary>
            Get the list of scopes
            </summary>
        </member>
        <member name="P:ZarDevs.Http.Security.ITokenUsernameRequestBuilder.Username">
            <summary>
            Get the username
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Security.ITokenUsernameRequestBuilder.AddScopes(System.String[])">
            <summary>
            Add scopes to the request
            </summary>
            <param name="scopes">A list of scopes to add.</param>
            <returns>The current instance</returns>
        </member>
        <member name="M:ZarDevs.Http.Security.ITokenUsernameRequestBuilder.AddScopes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add scopes to the request
            </summary>
            <param name="scopes">A list of scopes to add.</param>
            <returns>The current instance</returns>
        </member>
        <member name="M:ZarDevs.Http.Security.ITokenUsernameRequestBuilder.SetCredendials(System.String,System.String)">
            <summary>
            Add the <see cref="P:ZarDevs.Http.Security.ITokenUsernameRequestBuilder.Username"/> and <see cref="P:ZarDevs.Http.Security.ITokenUsernameRequestBuilder.Password"/> for the request
            </summary>
            <param name="username">The username</param>
            <param name="password">The password</param>
            <returns>The current instance</returns>
        </member>
        <member name="T:ZarDevs.Http.Security.ITokenReader`1">
            <summary>
            Token reader that reads a string token and converts it to a <typeparamref name="TToken"/>.
            </summary>
            <typeparam name="TToken">The parsed token type <typeparamref name="TToken"/>.</typeparam>
        </member>
        <member name="M:ZarDevs.Http.Security.ITokenReader`1.ReadToken(System.String)">
            <summary>
            The the token from the specified string
            </summary>
            <param name="token">The token in string format</param>
            <returns>The converted token.</returns>
        </member>
        <member name="T:ZarDevs.Http.Security.LoginToken">
            <summary>
            Login token model
            </summary>
        </member>
        <member name="P:ZarDevs.Http.Security.LoginToken.AccessToken">
            <summary>
            Get or set the token type
            </summary>
        </member>
        <member name="P:ZarDevs.Http.Security.LoginToken.ClientId">
            <summary>
            Get or set the refresh token
            </summary>
        </member>
        <member name="P:ZarDevs.Http.Security.LoginToken.ClientSecret">
            <summary>
            Get or set the client secret
            </summary>
        </member>
        <member name="P:ZarDevs.Http.Security.LoginToken.RefreshToken">
            <summary>
            Get or set the access token
            </summary>
        </member>
        <member name="P:ZarDevs.Http.Security.LoginToken.TokenType">
            <summary>
            Get or set the token type
            </summary>
        </member>
        <member name="P:ZarDevs.Http.Security.LoginToken.ValidTo">
            <summary>
            Get or set the token valid to
            </summary>
        </member>
        <member name="T:ZarDevs.Http.Security.SecurityTokenConstants">
            <summary>
            Constants class used by security API
            </summary>
        </member>
        <member name="T:ZarDevs.Http.Security.TokenValidationExtentions">
            <summary>
            <see cref="T:Microsoft.IdentityModel.Tokens.SecurityToken"/> extention class.
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Security.TokenValidationExtentions.HasExpired(Microsoft.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Check if the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityToken"/> has expired.
            </summary>
            Validate if the <paramref name="token"/> has expired. This will check if the is still valid at the current date and time i.e. <see cref="P:Microsoft.IdentityModel.Tokens.SecurityToken.ValidTo"/> is less or equal to <see cref="P:System.DateTime.UtcNow"/>
            <returns>A true if the token has expired.</returns>
        </member>
        <member name="T:ZarDevs.Http.Security.ITokenValidator">
            <summary>
            Token validator interface used to read a JWT access token <see cref="T:System.String"/> and validate if it is valid or return the actual <see cref="T:Microsoft.IdentityModel.Tokens.SecurityToken"/>
            </summary>
        </member>
        <member name="M:ZarDevs.Http.Security.ITokenValidator.ReadJwtToken(System.String)">
            <summary>
            Load the current access token and return a <see cref="T:Microsoft.IdentityModel.Tokens.SecurityToken"/>. If <paramref name="accessToken"/> is not a valid token <see cref="T:System.String"/> then a <c>null</c> value will be returned.
            </summary>
            <param name="accessToken">A valid access token string.</param>
        </member>
    </members>
</doc>
