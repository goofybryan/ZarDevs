<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZarDevs.DependencyInjection.AutoFac</name>
    </assembly>
    <members>
        <member name="T:ZarDevs.DependencyInjection.AutoFacDependencyScopeBinder">
            <summary>
            AutoFac dependency scope binder. This will convert bind the <see cref="T:ZarDevs.DependencyInjection.IDependencyInfo"/> and map to the <see cref="T:Autofac.ContainerBuilder"/>
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.AutoFacDependencyScopeBinder.#ctor(ZarDevs.DependencyInjection.IDependencyFactory)">
            <summary>
            Create new instance of the <see cref="T:ZarDevs.DependencyInjection.AutoFacDependencyScopeBinder"/>
            </summary>
            <param name="dependencyFactory">An instance of the dependency factory.</param>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="dependencyFactory"/> is null.</exception>
        </member>
        <member name="M:ZarDevs.DependencyInjection.AutoFacDependencyScopeBinder.OnBind(Autofac.ContainerBuilder,ZarDevs.DependencyInjection.IDependencyInfo)">
            <inheritdoc/>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IAutoFacDependencyContainer">
            <summary>
            AutoFac dependency container
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IAutoFacDependencyContainer.Container">
            <summary>
            AutoFac Container
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IocAutoFac">
            <summary>
            AutoFac initialization
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IocAutoFac.Initialize(Autofac.Builder.ContainerBuildOptions,ZarDevs.DependencyInjection.IDependencyScopeBinder{Autofac.ContainerBuilder}[])">
            <summary>
            Create a new IOC Kernel container that will start the binding process.
            </summary>
            <param name="buildOptions">The container build options.</param>
            <param name="additionalBinders">Any additional binders that can do additional resoultions. These are added first before <see cref="T:ZarDevs.DependencyInjection.AutoFacDependencyScopeBinder"/> is added.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IocContainer.Dispose">
            <summary>
            Disposed of the resources.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IocKernelBuilder">
            <summary>
            Ioc Kernerl Builder that will create instances of the underlying IOC technology
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IocKernelBuilder.#ctor(Autofac.Builder.ContainerBuildOptions,ZarDevs.DependencyInjection.IDependencyFactory,ZarDevs.DependencyInjection.IDependencyScopeBinder{Autofac.ContainerBuilder}[])">
            <summary>
            Instanciate a new instance with build options
            </summary>
            <param name="buildOptions">AutoFac build options.</param>
            <param name="dependencyFactory">The dependency factory.</param>
            <param name="additionalBinders">Optional additional binders.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IocKernelBuilder.CreateDependencyBuilder">
            <summary>
            Create a new instance of the dependency builder
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IocKernelBuilder.CreateIocContainer">
            <summary>
            Create a new instance of the IOC container that wraps the AutoFac container.
            </summary>
        </member>
    </members>
</doc>
