<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZarDevs.Runtime</name>
    </assembly>
    <members>
        <member name="T:ZarDevs.Runtime.ICreate">
            <summary>
            Create class that is uses reflection to create new objects.
            </summary>
        </member>
        <member name="M:ZarDevs.Runtime.ICreate.New``1(System.Object[])">
            <summary>
            Create a new instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to create.</typeparam>
            <param name="constructorArgs">The list of constructor args.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="M:ZarDevs.Runtime.ICreate.New(System.Type,System.Object[])">
            <summary>
            Create a new instace of <paramref name="type"/>
            </summary>
            <param name="type">The type to create</param>
            <param name="constructorArgs">The list of constructor args.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="T:ZarDevs.Runtime.Create">
            <summary>
            Create class that is uses reflection to create new objects.
            </summary>
        </member>
        <member name="P:ZarDevs.Runtime.Create.Instance">
            <summary>
            Static instance of the <see cref="T:ZarDevs.Runtime.ICreate"/> object.
            </summary>
        </member>
        <member name="M:ZarDevs.Runtime.Create.New``1(System.Object[])">
            <summary>
            Create a new instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to create.</typeparam>
            <param name="constructorArgs">The list of constructor args.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="M:ZarDevs.Runtime.Create.New(System.Type,System.Object[])">
            <summary>
            Create a new instace of <paramref name="type"/>
            </summary>
            <param name="type">The type to create</param>
            <param name="constructorArgs">The list of constructor args.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="T:ZarDevs.Runtime.IInspectConstructor">
            <summary>
            Runtime constructor inpsection.
            </summary>
        </member>
        <member name="M:ZarDevs.Runtime.IInspectConstructor.FindParameterNames(System.Type,System.Object[])">
            <summary>
            Find the constructor arguments for a list of ordered parameters.
            </summary>
            <param name="target">The target object type.</param>
            <param name="argumentValuesInOrder"></param>
            <returns>Returns a list of constructor parameter names and associated values.</returns>
        </member>
        <member name="M:ZarDevs.Runtime.IInspectConstructor.GetConstructorParameterMap(System.Type)">
            <summary>
            Get a map of all the public constructors and a list of the associated parameter types.
            </summary>
            <param name="target">The target object type.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.Runtime.IInspectConstructor.GetConstructorParameters(System.Type)">
            <summary>
            Get the constructor parameters. This will return the constructor with the least amount
            of constructor parameters.
            </summary>
            <param name="target">The target object type.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.Runtime.IInspectConstructor.OrderParameters(System.Type,System.Collections.Generic.IList{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Finds a constructor with the same parameters and returns the ordered list of parameter
            objects that have been matched by name and type.
            </summary>
            <param name="target">The target object type.</param>
            <param name="unorderedValueMapping">
            The unordered list of constructor paramaters and the associated name.
            </param>
            <returns>The ordered list of objects from the mapping.</returns>
        </member>
        <member name="M:ZarDevs.Runtime.IInspectConstructor.OrderParameters(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Finds a constructor with the same parameters and returns the ordered list of parameter
            objects that have been matched by name and type.
            </summary>
            <param name="target">The target object type.</param>
            <param name="unorderedValueMapping">
            The unordered list of constructor paramaters and the associated name.
            </param>
            <returns>The ordered list of objects from the mapping.</returns>
        </member>
        <member name="T:ZarDevs.Runtime.InspectConstructor">
            <summary>
            Runtime constructor inpsection.
            </summary>
        </member>
        <member name="P:ZarDevs.Runtime.InspectConstructor.Instance">
            <summary>
            Get and instance of the Inpect class.
            </summary>
        </member>
        <member name="M:ZarDevs.Runtime.InspectConstructor.FindParameterNames(System.Type,System.Object[])">
            <summary>
            Find the constructor arguments for a list of ordered parameters.
            </summary>
            <param name="target">The target object type.</param>
            <param name="argumentValuesInOrder"></param>
            <returns>Returns a list of constructor parameter names and associated values.</returns>
        </member>
        <member name="M:ZarDevs.Runtime.InspectConstructor.GetConstructorParameterMap(System.Type)">
            <summary>
            Get a map of all the public constructors and a list of the associated parameter types.
            </summary>
            <param name="target">The target object type.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.Runtime.InspectConstructor.GetConstructorParameters(System.Type)">
            <summary>
            Get the constructor parameters. This will return the constructor with the least amount
            of constructor parameters.
            </summary>
            <param name="target">The target object type.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.Runtime.InspectConstructor.OrderParameters(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Finds a constructor with the same parameters and returns the ordered list of parameter
            objects that have been matched by name and type.
            </summary>
            <param name="target">The target object type.</param>
            <param name="unorderedValueMapping">
            The unordered list of constructor paramaters and the associated name.
            </param>
            <returns>The ordered list of objects from the mapping.</returns>
        </member>
        <member name="M:ZarDevs.Runtime.InspectConstructor.OrderParameters(System.Type,System.Collections.Generic.IList{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Finds a constructor with the same parameters and returns the ordered list of parameter
            objects that have been matched by name and type.
            </summary>
            <param name="target">The target object type.</param>
            <param name="unorderedValueMapping">
            The unordered list of constructor paramaters and the associated name.
            </param>
            <returns>The ordered list of objects from the mapping.</returns>
        </member>
        <member name="T:ZarDevs.Runtime.IInspectMethod">
            <summary>
            Runtime method inpsection.
            </summary>
        </member>
        <member name="M:ZarDevs.Runtime.IInspectMethod.FindMethodForArguments(System.Type,System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Get method for the target type and arguments.
            </summary>
            <param name="target">The target object type.</param>
            <param name="methodName">The method name.</param>
            <param name="argumentValuesInOrder"></param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.Runtime.IInspectMethod.GetMethodParameterMap(System.Type,System.String)">
            <summary>
            Get a map of all the public methods and a list of the associated parameter types.
            </summary>
            <param name="target">The target object type.</param>
            <param name="methodName">The method name.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.Runtime.IInspectMethod.GetMethods(System.Type,System.String)">
            <summary>
            Get all the available methods for the <paramref name="methodName"/>.
            </summary>
            <param name="target">The target type.</param>
            <param name="methodName">The method name.</param>
            <returns>A list of methods.</returns>
        </member>
        <member name="T:ZarDevs.Runtime.InspectMethod">
            <summary>
            Runtime method inpsection.
            </summary>
        </member>
        <member name="P:ZarDevs.Runtime.InspectMethod.Instance">
            <summary>
            Get and instance of the Inpect class.
            </summary>
        </member>
        <member name="M:ZarDevs.Runtime.InspectMethod.FindMethodForArguments(System.Type,System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Get method for the target type and arguments.
            </summary>
            <param name="target">The target object type.</param>
            <param name="methodName">The method name.</param>
            <param name="argumentValuesInOrder"></param>
        </member>
        <member name="M:ZarDevs.Runtime.InspectMethod.GetMethodParameterMap(System.Type,System.String)">
            <summary>
            Get a map of all the public methods and a list of the associated parameter types. Always
            gets the method with the lowest parameter count.
            </summary>
            <param name="target">The target object type.</param>
            <param name="methodName">The method name.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.Runtime.InspectMethod.GetMethods(System.Type,System.String)">
            <summary>
            Get all the available methods for the <paramref name="methodName"/>.
            </summary>
            <param name="target">The target type.</param>
            <param name="methodName">The method name.</param>
            <returns>A list of methods.</returns>
        </member>
        <member name="T:ZarDevs.Runtime.IInspectObject">
            <summary>
            Runtime object type inspection.
            </summary>
        </member>
        <member name="M:ZarDevs.Runtime.IInspectObject.FindBaseTypes(System.Type,System.Collections.Generic.IList{System.Type})">
            <summary>
            Find all the inheriting base types for the specified <paramref name="type"/>. If the base type is listed in the <paramref name="ignoredTypes"/> list it will stop and return.
            </summary>
            <param name="type">The type to inspect.</param>
            <param name="ignoredTypes">The ignored types that if inheritted by the <paramref name="type"/> or any base classes, it will stop and return the list of found base types</param>
            <returns>All interface types or an empty list.</returns>
        </member>
        <member name="M:ZarDevs.Runtime.IInspectObject.FindInterfaceTypes(System.Type,System.Collections.Generic.IList{System.Type})">
            <summary>
            Find all the interfaces types for the specified <paramref name="type"/>. If the inteface type is listed in the <paramref name="ignoredTypes"/> it will not be added.
            </summary>
            <param name="type">The type to inspect.</param>
            <param name="ignoredTypes">The ignored types that if implemented or inherited by the <paramref name="type"/> it will not be added.</param>
            <returns>All interface types or an empty list.</returns>
        </member>
        <member name="M:ZarDevs.Runtime.IInspectObject.FindImplementingTypes(System.Type,System.Collections.Generic.IList{System.Type})">
            <summary>
            Find all the interfaces or base types for the specified <paramref name="type"/>. If the inteface or base type is listed in the <paramref name="ignoredTypes"/> it will not be added.
            </summary>
            <param name="type">The type to inspect.</param>
            <param name="ignoredTypes">The ignored types that if implemented or inherited by the <paramref name="type"/> it will not be added.</param>
            <returns>All interface types or an empty list.</returns>
        </member>
        <member name="T:ZarDevs.Runtime.InspectObject">
            <summary>
            Runtime object type inspection.
            </summary>
        </member>
        <member name="P:ZarDevs.Runtime.InspectObject.Instance">
            <summary>
            Get and instance of the Inpect class.
            </summary>
        </member>
        <member name="M:ZarDevs.Runtime.InspectObject.FindBaseTypes(System.Type,System.Collections.Generic.IList{System.Type})">
            <summary>
            Find all the inheriting base types for the specified <paramref name="type"/>. If the base type is listed in the <paramref name="ignoredTypes"/> list it will stop and return.
            </summary>
            <param name="type">The type to inspect.</param>
            <param name="ignoredTypes">The ignored types that if inherited by the <paramref name="type"/> or any base classes, it will stop and return the list of found base types</param>
            <returns>All interface types or an empty list.</returns>
        </member>
        <member name="M:ZarDevs.Runtime.InspectObject.FindInterfaceTypes(System.Type,System.Collections.Generic.IList{System.Type})">
            <summary>
            Find all the interfaces types for the specified <paramref name="type"/>. If the inteface type is listed in the <paramref name="ignoredTypes"/> it will not be added.
            </summary>
            <param name="type">The type to inspect.</param>
            <param name="ignoredTypes">The ignored types that if implemented or inherited by the <paramref name="type"/> it will not be added.</param>
            <returns>All interface types or an empty list.</returns>
        </member>
        <member name="M:ZarDevs.Runtime.InspectObject.FindImplementingTypes(System.Type,System.Collections.Generic.IList{System.Type})">
            <summary>
            Find all the interfaces or base types for the specified <paramref name="type"/>. If the inteface or base type is listed in the <paramref name="ignoredTypes"/> it will not be added.
            </summary>
            <param name="type">The type to inspect.</param>
            <param name="ignoredTypes">The ignored types that if implemented or inherited by the <paramref name="type"/> it will not be added.</param>
            <returns>All interface types or an empty list.</returns>
        </member>
    </members>
</doc>
