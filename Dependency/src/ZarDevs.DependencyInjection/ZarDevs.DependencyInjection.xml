<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZarDevs.DependencyInjection</name>
    </assembly>
    <members>
        <member name="T:ZarDevs.DependencyInjection.DependencyBuilder">
            <summary>
            Dependency builder used to build up the dependencies that will be translated to an
            appropriate IOC solution.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyBuilder.#ctor(ZarDevs.DependencyInjection.IDependencyContainer)">
            <summary>
            Create a new instance
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyBuilder.Resolve(System.Type)">
            <summary>
            Create a new binding with the specified type.
            </summary>
            <param name="type">The specified type to bind.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyBuilder.Resolve(System.Type[])">
            <summary>
            Create a new binding with the specified type.
            </summary>
            <param name="resolvedTypes">The a list of types to bind.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyBuilder.Resolve``1">
            <summary>
            Create a new binding with the specified type.
            </summary>
            <typeparam name="TResolve">The specified type to bind.</typeparam>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyBuilder.Bind(System.Type)">
            <summary>
            Create a new binding with the specified type.
            </summary>
            <param name="bindType">The specified type to bind.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyBuilder.Bind``1">
            <summary>
            Create a new binding with the specified type.
            </summary>
            <typeparam name="TBind">The specified type to Bind.</typeparam>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyBuilder.Bind(System.Type,System.Type)">
            <summary>
            Create a new binding with the specified type.
            </summary>
            <param name="bindType">The specified type to bind.</param>
            <param name="resolveType">The resolved type.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyBuilder.Bind``2">
            <summary>
            Create a new binding with the specified type.
            </summary>
            <typeparam name="TBind">The specified type to Bind.</typeparam>
            <typeparam name="TResolve">The specified type to resolve.</typeparam>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyBuilder.BindInstance``1(``0)">
            <summary>
            Bind the instance that will be resolved. This will be a singleton instance regardless of configuration.
            </summary>
            <typeparam name="TBind"></typeparam>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyBuilder.BindFunction(System.Func{ZarDevs.DependencyInjection.IDependencyContext,System.Object})">
            <summary>
            Bind to a method that will be used to reolve the request type.
            </summary>
            <param name="method">
            The function <see cref="T:System.Func`2"/> will be executed, if any parameters are
            available, they will be passed in.
            </param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyBuilder.BindFactory``1(System.String)">
            <summary>
            Bind to a factory method that will be used to resolve the request.
            </summary>
            <typeparam name="TFactory">The factory type</typeparam>
            <param name="methodName">The factory method</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyBuilder.BindFactory(System.Type,System.String)">
            <summary>
            Bind to a factory method that will be used to resolve the request.
            </summary>
            <param name="factoryType">The factory type</param>
            <param name="methodName">The factory method</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyBuilder.Build">
            <summary>
            Build the dependencies.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencyContainerBase">
            <summary>
            Dependency container base implementation.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyContainerBase.#ctor">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencyContainerBase.Definitions">
            <summary>
            A list of definitions that have been added.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyContainerBase.Build(System.Collections.Generic.IList{ZarDevs.DependencyInjection.IDependencyInfo})">
            <summary>
            Build the dependencies.
            </summary>
            <param name="definitions">The list of definitions to transform.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyContainerBase.Dispose">
            <summary>
            Dispose of any resources.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyContainerBase.TryGetBinding(System.Type,System.Object)">
            <summary>
            Retrieve a dependency binding information when required.
            </summary>
            <param name="requestType">The request type to retrieve.</param>
            <param name="key">A key that the binding is associated with, can be null.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyContainerBase.Dispose(System.Boolean)">
            <summary>
            Dispose of any resources.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyContainerBase.OnBuild(ZarDevs.DependencyInjection.IDependencyInfo)">
            <summary>
            Implement the on build method that will be called for each definition added.
            </summary>
            <param name="definition">The dependency info that describes what is required.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyContainerBase.OnBuildEnd">
            <summary>
            Virtual method that occurs when the build ends. Does not need to be called when overridden.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyContainerBase.OnBuildStart">
            <summary>
            Virtual method that occurs when the build starts. Does not need to be called when overridden.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyContext">
            <summary>
            The dependency information context class used for custom IOC request specifically for requests
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IDependencyContext.ArgumentCount">
            <summary>
            Get the argument count
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IDependencyContext.Info">
            <summary>
            Get the dependency information that resulted in the context being created.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IDependencyContext.Ioc">
            <summary>
            Get the IOC constainer
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyContext.GetArguments">
            <summary>
            Get the arguments associated with this context
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyContext.SetArguments(System.Object[])">
            <summary>
            Set the arguments for the context.
            </summary>
            <param name="args">The context arguments</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyContext.SetArguments(System.Collections.Generic.IList{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Set the arguments for the context.
            </summary>
            <param name="namedArgs">The context arguments</param>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencyContext">
            <summary>
            Dependency information context used for resolving instances.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyContext.#ctor(ZarDevs.DependencyInjection.IIocContainer,ZarDevs.DependencyInjection.IDependencyInfo)">
            <summary>
            Create a new instance of the context class.
            </summary>
            <param name="ioc">Specify the IOC container</param>
            <param name="info">Specify the binding info</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyContext.#ctor(ZarDevs.DependencyInjection.IIocContainer,ZarDevs.DependencyInjection.IDependencyInfo,System.Object[])">
            <summary>
            Create a new instance of the context class.
            </summary>
            <param name="ioc">Specify the IOC container.</param>
            <param name="info">Specify the binding info</param>
            <param name="args">A list of ordered args.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyContext.#ctor(ZarDevs.DependencyInjection.IIocContainer,ZarDevs.DependencyInjection.IDependencyInfo,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Create a new instance of the context class.
            </summary>
            <param name="ioc">Specify the IOC container</param>
            <param name="info">Specify the binding info</param>
            <param name="args">A list of named arguments.</param>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencyContext.ArgumentCount">
            <summary>
            Get the argument count
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencyContext.Info">
            <summary>
            Get the dependency information that resulted in the context being created.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencyContext.Ioc">
            <summary>
            Get the IOC constainer
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyContext.GetArguments">
            <summary>
            Get the arguments associated with this context
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyContext.SetArguments(System.Object[])">
            <summary>
            Set the arguments for the context.
            </summary>
            <param name="args">The context arguments</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyContext.SetArguments(System.Collections.Generic.IList{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Set the arguments for the context.
            </summary>
            <param name="namedArgs">The context arguments</param>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyDefinitions">
            <summary>
            Contains a list of dependency definitions
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyDefinitions.Add(ZarDevs.DependencyInjection.IDependencyInfo)">
            <summary>
            Add a dependency to the definitons list.
            </summary>
            <param name="dependency">The dependency to add.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyDefinitions.Get``1(System.Object)">
            <summary>
            Get a the dependency information for the type and key. If multiple are found, returns
            the first one.
            </summary>
            <typeparam name="T">The request type.</typeparam>
            <param name="key">The key</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyDefinitions.Get(System.Type,System.Object)">
            <summary>
            Get a the dependency information for the type and key. If multiple are found, returns
            the first one.
            </summary>
            <param name="requestType">The request type.</param>
            <param name="key">The key</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyDefinitions.GetAll``1(System.Object)">
            <summary>
            Get all the dependency information for the type and key.
            </summary>
            <typeparam name="T">The request type.</typeparam>
            <param name="key">The key</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyDefinitions.GetAll(System.Type,System.Object)">
            <summary>
            Get all the dependency information for the type and key.
            </summary>
            <param name="requestType">The request type.</param>
            <param name="key">The key</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyDefinitions.TryGet``1(System.Object)">
            <summary>
            Try and get the information for the request type and key.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The key</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyDefinitions.TryGet(System.Type,System.Object)">
            <summary>
            Try and get the information for the request type and key.
            </summary>
            <param name="requestType">The request type</param>
            <param name="key">The key</param>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencyInfo">
            <summary>
            Base dependency info class that describes the <see cref="P:ZarDevs.DependencyInjection.DependencyInfo.ResolvedTypes"/>, <see cref="P:ZarDevs.DependencyInjection.DependencyInfo.Scope"/>
            and optionally <see cref="P:ZarDevs.DependencyInjection.DependencyInfo.Key"/> for any binding.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInfo.#ctor(System.Object,ZarDevs.DependencyInjection.DependyBuilderScope)">
            <summary>
            Create a new instance with the base variables set.
            </summary>
            <param name="key">Specify the key, optional.</param>
            <param name="scope">Specify the scope, optional, default is <see cref="F:ZarDevs.DependencyInjection.DependyBuilderScope.Transient"/></param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInfo.#ctor(ZarDevs.DependencyInjection.IDependencyInfo)">
            <summary>
            Create a new instance with copied values.
            </summary>
            <param name="copy">The base instance to copy from.</param>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencyInfo.Key">
            <summary>
            An optional key that will be used to define the binding.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencyInfo.ResolvedTypes">
            <summary>
            Specify the resolved types for this binding.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencyInfo.Scope">
            <summary>
            The scope that the binding will be defined to, default is <see cref="F:ZarDevs.DependencyInjection.DependyBuilderScope.Transient"/>
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInfo.CreateContext(ZarDevs.DependencyInjection.IIocContainer)">
            <summary>
            Create a new instance of the dependency context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInfo.ToString">
            <summary>
            Overridden ToString describing the class properties.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencyInfoExtentions">
            <summary>
            Dependency info extensions
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInfoExtentions.As(ZarDevs.DependencyInjection.IDependencyInfo,System.Type)">
            <summary>
            Convert a generic type info into a concrete type info
            </summary>
            <param name="info">The current dependency info</param>
            <param name="concreteRequestType">The concrete type that has been requested.</param>
            <returns>A new instance of the dependency info with the concrete information set.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInfoExtentions.As(ZarDevs.DependencyInjection.IDependencyInfo,System.Type[])">
            <summary>
            Convert a generic type info into a concrete type info
            </summary>
            <param name="info">The current dependency info</param>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns>A new instance of the dependency info with the concrete information set.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInfoExtentions.As(ZarDevs.DependencyInjection.IDependencyTypeInfo,System.Type)">
            <summary>
            Convert a generic type info into a concrete type info
            </summary>
            <param name="typeInfo">The current dependency info</param>
            <param name="concreteRequestType">The concrete type that has been requested.</param>
            <returns>A new instance of the dependency info with the concrete information set.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInfoExtentions.As(ZarDevs.DependencyInjection.IDependencyTypeInfo,System.Type[])">
            <summary>
            Convert a generic type info into a concrete type info
            </summary>
            <param name="typeInfo">The current dependency info</param>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns>A new instance of the dependency info with the concrete information set.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInfoExtentions.As(ZarDevs.DependencyInjection.IDependencyFactoryInfo,System.Type)">
            <summary>
            Convert a generic factory info into a concrete type info.
            </summary>
            <param name="typeInfo">The current dependency info</param>
            <param name="concreteRequestType">The concrete type that has been requested.</param>
            <returns>A new instance of the dependency info with the concrete information set.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInfoExtentions.As(ZarDevs.DependencyInjection.IDependencyFactoryInfo,System.Type[])">
            <summary>
            Convert a generic factory info into a concrete type info.
            </summary>
            <param name="typeInfo">The current dependency info</param>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns>A new instance of the dependency info with the concrete information set.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInfoExtentions.As``1(``0,System.Type[],System.Type,System.Func{System.Type,``0})">
            <summary>
            Convert a dependency info to a concreate type.
            </summary>
            <typeparam name="TInfo">The <see cref="T:ZarDevs.DependencyInjection.IDependencyInfo"/> type</typeparam>
            <param name="info">The current dependency info</param>
            <param name="genericTypeArguments">The generic arguments type that has been requested.</param>
            <param name="resolutionType">The generic resolution type</param>
            <param name="concreateCreation">Function to create a new instance of the <typeparamref name="TInfo"/>. The type passed in will b the concrete type of <paramref name="resolutionType"/>/></param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInfoExtentions.IsFactoryGeneric(ZarDevs.DependencyInjection.IDependencyFactoryInfo)">
            <summary>
            Get an indicator to see if the factory is a generic type.
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependencyInstanceInfo">
            <summary>
            Dpendency info class that describes the dependency binding and the Instance that will always
            be resolved.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInstanceInfo.#ctor(System.Type,System.Object)">
            <summary>
            Create a new instance
            </summary>
            <param name="requestType">Specify the request type.</param>
            <param name="instance">The instance that is always returned.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.DependencyInstanceInfo.#ctor(System.Object,ZarDevs.DependencyInjection.IDependencyInfo)">
            <summary>
            Create a new instance
            </summary>
            <param name="instance">The instance that is always returned.</param>
            <param name="copy">The initail descriptor that's values will be copied.</param>
        </member>
        <member name="P:ZarDevs.DependencyInjection.DependencyInstanceInfo.Instance">
            <summary>
            The instance that is always returned.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.DependyBuilderScope">
            <summary>
            Dependency builder scope.
            </summary>
        </member>
        <member name="F:ZarDevs.DependencyInjection.DependyBuilderScope.Transient">
            <summary>
            Indicate that the request must be resolve a new instance with each call.
            </summary>
        </member>
        <member name="F:ZarDevs.DependencyInjection.DependyBuilderScope.Singleton">
            <summary>
            Indicate that the request must be resolve once and then returned with each call.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyBuilder">
            <summary>
            Dependency builder interface that is used to start the binding process.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilder.Bind(System.Type)">
            <summary>
            Create a new binding with the specified type.
            </summary>
            <param name="bindType">The specified type to bind.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilder.Bind``1">
            <summary>
            Create a new binding with the specified type.
            </summary>
            <typeparam name="TBind">The specified type to Bind.</typeparam>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilder.Bind(System.Type,System.Type)">
            <summary>
            Create a new binding with the specified type.
            </summary>
            <param name="bindType">The specified type to bind.</param>
            <param name="resolveType">The resolved type.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilder.Bind``2">
            <summary>
            Create a new binding with the specified type.
            </summary>
            <typeparam name="TBind">The specified type to Bind.</typeparam>
            <typeparam name="TResolve">The specified type to resolve.</typeparam>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilder.BindInstance``1(``0)">
            <summary>
            Bind the instance that will be resolved. This will be a singleton instance regardless of configuration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilder.BindFunction(System.Func{ZarDevs.DependencyInjection.IDependencyContext,System.Object})">
            <summary>
            Bind to a method that will be used to reolve the request type.
            </summary>
            <param name="method">
            The function <see cref="T:System.Func`2"/> will be executed, if any parameters are
            available, they will be passed in.
            </param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilder.BindFactory``1(System.String)">
            <summary>
            Bind to a factory method that will be used to resolve the request.
            </summary>
            <typeparam name="T">The factory type</typeparam>
            <param name="methodName">The factory method</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilder.BindFactory(System.Type,System.String)">
            <summary>
            Bind to a factory method that will be used to resolve the request.
            </summary>
            <param name="factoryType">The factory type</param>
            <param name="methodName">The factory method</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilder.Build">
            <summary>
            Build the dependencies.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyBuilderBindingMetaData">
            <summary>
            Bind in which scope and key is used to when resolving the request type.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilderBindingMetaData.With(System.Type)">
            <summary>
            Bind the specified type to
            </summary>
            <param name="type">Specified type to that will be resolved.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilderBindingMetaData.With``1">
            <summary>
            Bind the specified type to that will be resolved.
            </summary>
            <typeparam name="T">Specified type to that will be resolved.</typeparam>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilderBindingMetaData.With``1(``0)">
            <summary>
            Bind the instance that will be resolved. This will be a singleton instance regardless of configuration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilderBindingMetaData.With(System.Func{ZarDevs.DependencyInjection.IDependencyContext,System.Object})">
            <summary>
            Bind to a method that will be used to reolve the request type.
            </summary>
            <param name="method">
            The function <see cref="T:System.Func`2"/> will be executed, if any parameters are
            available, they will be passed in.
            </param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilderBindingMetaData.WithFactory``1(System.String)">
            <summary>
            Bind to a factory method that will be used to resolve the request.
            </summary>
            <typeparam name="T">The factory type</typeparam>
            <param name="methodName">The factory method</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilderBindingMetaData.WithFactory(System.Type,System.String)">
            <summary>
            Bind to a factory method that will be used to resolve the request.
            </summary>
            <param name="factoryType">The factory type</param>
            <param name="methodName">The factory method</param>
            <returns></returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyBuilderBindingResolve">
            <summary>
            One the request type has been bound in <see cref="T:ZarDevs.DependencyInjection.IDependencyBuilderBindingMetaData"/> the
            binding must be configured to a s resolution type, instance or method.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilderBindingResolve.InSingletonScope">
            <summary>
            Create the binding in Singleton Scope resolution.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilderBindingResolve.InTransientScope">
            <summary>
            Create the binding in Transient Scope resolution. This is the default scope.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilderBindingResolve.Resolve(System.Type)">
            <summary>
            Bind the specified type.
            </summary>
            <param name="type">Specified type to bind as the request type.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilderBindingResolve.Resolve(System.Type[])">
            <summary>
            Bind the specified type.
            </summary>
            <param name="types">Specified a list of types to bind as the request type.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilderBindingResolve.Resolve``1">
            <summary>
            Bind the specified type.
            </summary>
            <typeparam name="T">Specified type to bind as the request type</typeparam>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilderBindingResolve.ResolveAll(System.Type[])">
            <summary>
            Add all <code>interface</code>s and base <code>class</code>es to be resolved by this binding. This will not resolve for type <see cref="T:System.IDisposable"/>
            </summary>
            <param name="ignoredTypes">Specify a list of ignored types to also not bind to.</param>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyBuilderInfo">
            <summary>
            Dependency builder information for a specific binding.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IDependencyBuilderInfo.DependencyInfo">
            <summary>
            Get the dependency info
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyBuilderInfo.WithKey(System.Object)">
            <summary>
            Create the binding with the key value.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyContainer">
            <summary>
            Dependency container that is used to house a list of dependencies. This interface is used by
            the implemented IOC technology to transform the binding information.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyContainer.Build(System.Collections.Generic.IList{ZarDevs.DependencyInjection.IDependencyInfo})">
            <summary>
            Build the dependencies.
            </summary>
            <param name="definitions">The list of definitions to transform.</param>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyContainer.TryGetBinding(System.Type,System.Object)">
            <summary>
            Retrieve a dependency binding information when required.
            </summary>
            <param name="requestType">The request type to retrieve.</param>
            <param name="key">A key that the binding is associated with, can be null.</param>
            <returns></returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyFactoryInfo">
            <summary>
            Dependency factory information. When resolved the specified <see cref="P:ZarDevs.DependencyInjection.IDependencyFactoryInfo.MethodName"/> will be
            called from the <see cref="P:ZarDevs.DependencyInjection.IDependencyFactoryInfo.FactoryType"/> and returned.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IDependencyFactoryInfo.FactoryType">
            <summary>
            Get the factory type
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IDependencyFactoryInfo.MethodName">
            <summary>
            Get the method of the factory that will return the resolved type.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyInfo">
            <summary>
            Base dependency information description.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IDependencyInfo.Key">
            <summary>
            Specify the key of the dependency, can be null.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IDependencyInfo.ResolvedTypes">
            <summary>
            Specify the resolved types for this binding.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IDependencyInfo.Scope">
            <summary>
            Specify the scope that this dependency is active in.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyInfo.CreateContext(ZarDevs.DependencyInjection.IIocContainer)">
            <summary>
            Create the dependency context
            </summary>
            <param name="ioc">The ioc container</param>
            <returns></returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyInstanceInfo">
            <summary>
            Dependency instance information. When resolved, the specified instance will be returned.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IDependencyInstanceInfo.Instance">
            <summary>
            Get the instance that the IOC will resolve from the <see cref="P:ZarDevs.DependencyInjection.IDependencyInfo.ResolvedTypes"/>.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyMethodInfo">
            <summary>
            Dependency method information, when resolved the method will be invoked.
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IDependencyMethodInfo.Execute(ZarDevs.DependencyInjection.IDependencyContext)">
            <summary>
            Execute the method that has been configured
            </summary>
            <param name="context">The dependency context</param>
            <returns></returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IDependencyTypeInfo">
            <summary>
            Dependency type information. When resolved the specified type will be instantiated and returned.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IDependencyTypeInfo.ResolutionType">
            <summary>
            Get the resolved type that the IOC will resolved from the <see cref="P:ZarDevs.DependencyInjection.IDependencyInfo.ResolvedTypes"/>.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IIocContainer">
            <summary>
            IOC containter used to resolved a single instance
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.Resolve``1(System.Object[])">
            <summary>
            Resolve the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of ordered parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.Resolve``1(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Resolve the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of named parameters, these must match a constructor parameter name and associated types.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.Resolve``1">
            <summary>
            Resolve the requested type.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.ResolveAll(System.Type)">
            <summary>
            Resolve all instance of the requested type <paramref name="requestType"/>.
            </summary>
            <param name="requestType">The request type to resolve,</param>
            <returns>The resolved IEnumberable as an object (can safely be cast to IEnumerable).</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.ResolveAll``1">
            <summary>
            Resolve all instance of the requested type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.ResolveNamed``1(System.String,System.Object[])">
            <summary>
            Resolve the requested type with the list of paramaters specified.
            </summary>
            <param name="key">The name of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of ordered parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.ResolveNamed``1(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Resolve the requested type with the list of paramaters specified.
            </summary>
            <param name="name">The name of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of named parameters, these must match a constructor parameter name and associated types.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.ResolveNamed``1(System.String)">
            <summary>
            Resolve the requested type.
            </summary>
            <param name="key">The name of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.ResolveWithKey``1(System.Enum,System.Object[])">
            <summary>
            Resolve the requested type with the list of paramaters specified.
            </summary>
            <param name="key">The key of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of ordered parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.ResolveWithKey``1(System.Enum,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Resolve the requested type with the list of paramaters specified.
            </summary>
            <param name="key">The key of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of named parameters, these must match a constructor parameter name and associated types.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.ResolveWithKey``1(System.Object,System.Object[])">
            <summary>
            Resolve the requested type with the list of paramaters specified.
            </summary>
            <param name="key">The key of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of ordered parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.ResolveWithKey``1(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Resolve the requested type with the list of paramaters specified.
            </summary>
            <param name="key">The key of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of named parameters, these must match a constructor parameter name and associated types.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.ResolveWithKey``1(System.Enum)">
            <summary>
            Resolve the requested type with the list of paramaters specified.
            </summary>
            <param name="key">The key of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.ResolveWithKey``1(System.Object)">
            <summary>
            Resolve the requested type with the list of paramaters specified.
            </summary>
            <param name="key">The key of the resolution request.</param>
            <typeparam name="T">The request type</typeparam>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.TryResolve(System.Type)">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <param name="requestType">The request type</param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.TryResolve``1(System.Object[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of ordered parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.TryResolve``1(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="parameters">
            A list of named parameters, these must match a constructor parameter name and associated types.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.TryResolve``1">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.TryResolveNamed``1(System.String,System.Object[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The name of the resolution request.</param>
            <param name="parameters">
            A list of named parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.TryResolveNamed``1(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The name of the resolution request.</param>
            <param name="parameters">
            A list of named parameters, these must match a constructor parameter name and associated types.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.TryResolveNamed``1(System.String)">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The name of the resolution request.</param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.TryResolveWithKey``1(System.Enum,System.Object[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The key of the resolution request.</param>
            <param name="parameters">
            A list of named parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.TryResolveWithKey``1(System.Enum,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The key of the resolution request.</param>
            <param name="parameters">
            A list of named parameters, these must match a constructor parameter name and associated types.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.TryResolveWithKey``1(System.Object,System.Object[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The key of the resolution request.</param>
            <param name="parameters">
            A list of named parameters, these must match a constructor order.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.TryResolveWithKey``1(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The key of the resolution request.</param>
            <param name="parameters">
            A list of named parameters, these must match a constructor parameter name and associated types.
            </param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.TryResolveWithKey``1(System.Enum)">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The key of the resolution request.</param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocContainer.TryResolveWithKey``1(System.Object)">
            <summary>
            Try resolved the requested type with the list of paramaters specified.
            </summary>
            <typeparam name="T">The request type</typeparam>
            <param name="key">The key of the resolution request.</param>
            <returns>The resolved type.</returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IIocContainer`1">
            <summary>
            Ioc Containter with the Kernel exposed.
            </summary>
            <typeparam name="TKernel">The underlying resolution technology.</typeparam>
        </member>
        <member name="P:ZarDevs.DependencyInjection.IIocContainer`1.Kernel">
            <summary>
            Get the IOC container kernel that is the underlying resolution technology.
            </summary>
        </member>
        <member name="T:ZarDevs.DependencyInjection.IIocKernelBuilder">
            <summary>
            Ioc Kernel Builder that will create instances of the underlying IOC technology
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocKernelBuilder.CreateDependencyBuilder">
            <summary>
            Create the dependency container that will be used to bind the dependencies and the
            transform it to the underlying IOC methodology.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.IIocKernelBuilder.CreateIocContainer">
            <summary>
            Create the Ioc Container, <see cref="T:ZarDevs.DependencyInjection.IIocContainer"/> that will be used by this IOC
            implementation to resolve the request using the underlying IOC methodology.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZarDevs.DependencyInjection.Ioc">
            <summary>
            The over arching IOC implementation
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.Ioc.Container">
            <summary>
            Get the current IOC container.
            </summary>
        </member>
        <member name="P:ZarDevs.DependencyInjection.Ioc.Instance">
            <summary>
            IOC instance
            </summary>
        </member>
        <member name="M:ZarDevs.DependencyInjection.Ioc.Initialize(ZarDevs.DependencyInjection.IIocKernelBuilder,System.Action{ZarDevs.DependencyInjection.IDependencyBuilder},System.Action)">
            <summary>
            Initialize the IOC solution. This must be called for the IOC to work.
            </summary>
            <param name="container">
            Specifiy the kernel container that housed the underlying IOC methodology.
            </param>
            <param name="buildDependencies">
            Specify the build dependency action to invoke, this is where you can add additional
            dependencies to the builder.
            </param>
            <param name="afterBuild">Specify an after build action.</param>
            <returns></returns>
        </member>
        <member name="M:ZarDevs.DependencyInjection.Ioc.Dispose">
            <summary>
            Dispose of the IOC implementations.
            </summary>
        </member>
    </members>
</doc>
